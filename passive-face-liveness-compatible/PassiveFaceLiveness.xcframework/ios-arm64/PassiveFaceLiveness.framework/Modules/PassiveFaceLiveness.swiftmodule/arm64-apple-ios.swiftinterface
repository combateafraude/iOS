// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name PassiveFaceLiveness
import AVFoundation
import AVKit
import AdSupport
import CommonCrypto/*.CC_LONG*/
import CommonCrypto/*.CC_MD5*/
import CommonCrypto/*.CC_MD5_DIGEST_LENGTH*/
import CoreImage
import CoreMotion
import Foundation
import Swift
import UIKit
import Vision
import _Concurrency
public protocol PassiveFaceLivenessViewControllerDelegate : AnyObject {
  func showLoading(show: Swift.Bool)
  func showMessage(message: Swift.String)
  func showStepName(name: Swift.String)
  func showMask(type: PassiveFaceLiveness.MaskType)
  func show(manualCaptureButton hidden: Swift.Bool)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class PassiveFaceLivenessViewController : UIKit.UIViewController, AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate, AVFoundation.AVCapturePhotoCaptureDelegate, Foundation.URLSessionDelegate, Foundation.URLSessionTaskDelegate, Foundation.URLSessionDataDelegate {
  @_Concurrency.MainActor(unsafe) weak public var viewDelegate: PassiveFaceLiveness.PassiveFaceLivenessViewControllerDelegate?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func didReceiveMemoryWarning()
  @objc @_Concurrency.MainActor(unsafe) public func cancelButtonClick()
  @_Concurrency.MainActor(unsafe) @objc public func captureOutput(_ output: AVFoundation.AVCaptureOutput, didOutput sampleBuffer: CoreMedia.CMSampleBuffer, from connection: AVFoundation.AVCaptureConnection)
  @_Concurrency.MainActor(unsafe) public func clickButtonManualCapture()
  @_Concurrency.MainActor(unsafe) @objc public func photoOutput(_ output: AVFoundation.AVCapturePhotoOutput, didFinishProcessingPhoto photo: AVFoundation.AVCapturePhoto, error: Swift.Error?)
  @_Concurrency.MainActor(unsafe) @objc public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError: Swift.Error?)
  @objc deinit
}
extension UIKit.UIImage {
  public class func imageWithImage(sourceImage: UIKit.UIImage, scaledToWidth: CoreGraphics.CGFloat) -> UIKit.UIImage
}
@objc @_Concurrency.MainActor(unsafe) open class PassiveOverlayView : UIKit.UIView, PassiveFaceLiveness.PassiveFaceLivenessViewControllerDelegate {
  @_Concurrency.MainActor(unsafe) open func showLoading(show: Swift.Bool)
  @_Concurrency.MainActor(unsafe) open func showMessage(message: Swift.String)
  @_Concurrency.MainActor(unsafe) open func showStepName(name: Swift.String)
  @_Concurrency.MainActor(unsafe) open func showMask(type: PassiveFaceLiveness.MaskType)
  @_Concurrency.MainActor(unsafe) open func show(manualCaptureButton hidden: Swift.Bool)
  @_Concurrency.MainActor(unsafe) weak public var viewController: PassiveFaceLiveness.PassiveFaceLivenessViewController?
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class PassiveFaceLivenessFailure : ObjectiveC.NSObject, Swift.Encodable {
  public var message: Swift.String!
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
@objc @_hasMissingDesignatedInitializers public class Api : ObjectiveC.NSObject {
  public var baseUrl: Swift.String!
  public var relativeUrl: Swift.String!
  public var method: Swift.String!
  public var headers: [Swift.String]!
  public static var stage: PassiveFaceLiveness.CAFStage!
  public func getUrl(pathParam: Swift.String = "") -> Swift.String!
  public func getUrlWithQueryParam(name: Swift.String = "", value: Swift.String = "") -> Swift.String!
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class MessageSettings : ObjectiveC.NSObject {
  @objc override dynamic public init()
  open func setWaitMessage(message: Swift.String) -> PassiveFaceLiveness.MessageSettings
  open func setStepName(label: Swift.String) -> PassiveFaceLiveness.MessageSettings
  open func setFaceNotFoundMessage(message: Swift.String) -> PassiveFaceLiveness.MessageSettings
  open func setFaceTooFarMessage(message: Swift.String) -> PassiveFaceLiveness.MessageSettings
  open func setFaceNotFittedMessage(message: Swift.String) -> PassiveFaceLiveness.MessageSettings
  open func setMultipleFaceDetectedMessage(message: Swift.String) -> PassiveFaceLiveness.MessageSettings
  open func setHoldItMessage(message: Swift.String) -> PassiveFaceLiveness.MessageSettings
  open func setInvalidFaceMessage(message: Swift.String) -> PassiveFaceLiveness.MessageSettings
  open func setSensorStabilityMessage(message: Swift.String) -> PassiveFaceLiveness.MessageSettings
  open func getWaitMessage() -> Swift.String!
  open func getStepName() -> Swift.String!
  open func getFaceNotFoundMessage() -> Swift.String!
  open func getFaceTooFarMessage() -> Swift.String!
  open func getFaceNotFittedMessage() -> Swift.String!
  open func getMultipleFaceDetectedMessage() -> Swift.String!
  open func getHoldItMessage() -> Swift.String!
  open func getInvalidFaceMessage() -> Swift.String!
  open func getSensorStabilityMessage() -> Swift.String!
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UploadHelper {
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class PermissionReason : PassiveFaceLiveness.PassiveFaceLivenessFailure {
  @objc deinit
}
public protocol PassiveFaceLivenessCustomViewDelegate : AnyObject {
  func show(loading show: Swift.Bool)
  func show(message text: Swift.String)
  func show(stepName text: Swift.String)
  func show(mask type: PassiveFaceLiveness.MaskType)
  func show(manualCaptureButton hidden: Swift.Bool)
  func passiveFaceLivenessController(didFinishWithResults results: PassiveFaceLiveness.PassiveFaceLivenessResult)
  func passiveFaceLivenessControllerDidCancel()
  func passiveFaceLivenessController(didFailWithError error: PassiveFaceLiveness.PassiveFaceLivenessFailure)
}
@objc public class PassiveFaceLivenessCustomViewController : ObjectiveC.NSObject, AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate, AVFoundation.AVCapturePhotoCaptureDelegate {
  public init(passiveFaceLiveness: PassiveFaceLiveness.PassiveFaceLivenessSdk, viewController: UIKit.UIViewController, previewView: UIKit.UIView)
  public func viewWillDisappear()
  public func viewDidAppear()
  public func viewDidLayoutSubviews()
  public func cancelButtonClick()
  @objc public func captureOutput(_ output: AVFoundation.AVCaptureOutput, didOutput sampleBuffer: CoreMedia.CMSampleBuffer, from connection: AVFoundation.AVCaptureConnection)
  public func clickButtonManualCapture()
  @objc public func photoOutput(_ output: AVFoundation.AVCapturePhotoOutput, didFinishProcessingPhoto photo: AVFoundation.AVCapturePhoto, error: Swift.Error?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class AnalyticsApi : PassiveFaceLiveness.Api {
  public static let REQUEST_TRACKING_ID: PassiveFaceLiveness.AnalyticsApi
  public static let ADD_EVENT: PassiveFaceLiveness.AnalyticsApi
  @objc deinit
}
public protocol PassiveFaceLivenessControllerDelegate : ObjectiveC.NSObjectProtocol {
  func passiveFaceLivenessController(_ passiveFacelivenessController: PassiveFaceLiveness.PassiveFaceLivenessController, didFinishWithResults results: PassiveFaceLiveness.PassiveFaceLivenessResult)
  func passiveFaceLivenessControllerDidCancel(_ passiveFacelivenessController: PassiveFaceLiveness.PassiveFaceLivenessController)
  func passiveFaceLivenessController(_ passiveFacelivenessController: PassiveFaceLiveness.PassiveFaceLivenessController, didFailWithError error: PassiveFaceLiveness.PassiveFaceLivenessFailure)
}
@objc @_Concurrency.MainActor(unsafe) final public class PassiveFaceLivenessController : UIKit.UINavigationController {
  @_Concurrency.MainActor(unsafe) weak final public var passiveFaceLivenessDelegate: PassiveFaceLiveness.PassiveFaceLivenessControllerDelegate?
  @_Concurrency.MainActor(unsafe) required public init(passiveFaceLiveness: PassiveFaceLiveness.PassiveFaceLivenessSdk)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override final public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class StorageReason : PassiveFaceLiveness.PassiveFaceLivenessFailure {
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class PassiveFaceLivenessResult : ObjectiveC.NSObject, Swift.Encodable {
  public var image: UIKit.UIImage?
  public var imageUrl: Swift.String!
  public var capturePath: Swift.String?
  public var signedResponse: Swift.String?
  public var trackingId: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class JWTUtil : ObjectiveC.NSObject {
  public static func payloadToDict(_ payload: Swift.String) -> [Swift.String : Any]?
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class InvalidTokenReason : PassiveFaceLiveness.PassiveFaceLivenessFailure {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CafApi : PassiveFaceLiveness.Api {
  public static let IMAGE_UPLOAD: PassiveFaceLiveness.CafApi
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class LibraryReason : PassiveFaceLiveness.PassiveFaceLivenessFailure {
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class NetworkReason : PassiveFaceLiveness.PassiveFaceLivenessFailure {
  public var error: Swift.Error?
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
public enum MaskType {
  case normal
  case success
  case error
  public static func == (a: PassiveFaceLiveness.MaskType, b: PassiveFaceLiveness.MaskType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MobileApi : PassiveFaceLiveness.Api {
  public static let TOKEN_VERIFICATION: PassiveFaceLiveness.MobileApi
  public static let FACE_LIVENESS: PassiveFaceLiveness.MobileApi
  public static let IMAGE_UPLOAD: PassiveFaceLiveness.MobileApi
  public static let TOKEN_VERIFICATION_OTHER: PassiveFaceLiveness.MobileApi
  public static let FACE_LIVENESS_OTHER: PassiveFaceLiveness.MobileApi
  @objc deinit
}
public enum Resolution {
  case low, medium, high, photo, inputPriority, hd1280x720, hd1920x1080, hd4K3840x2160, iFrame960x540, iFrame1280x720, vga640x480, cif352x288
  public static func == (a: PassiveFaceLiveness.Resolution, b: PassiveFaceLiveness.Resolution) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc public class ServerFailureResponse : ObjectiveC.NSObject {
  public var message: Swift.String?
  public init(response: [Swift.String : Any])
  @objc deinit
}
@objc open class ProxySettings : ObjectiveC.NSObject {
  public var hostname: Swift.String!
  public var port: Swift.Int!
  public var user: Swift.String?
  public var password: Swift.String?
  public init(hostname: Swift.String, port: Swift.Int)
  open func setAutentication(user: Swift.String, password: Swift.String) -> PassiveFaceLiveness.ProxySettings
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers open class PassiveFaceLivenessSdk : ObjectiveC.NSObject, Swift.Encodable {
  public static let SDK_NAME: Swift.String
  public var mobileToken: Swift.String!
  public var personId: Swift.String?
  public var personCPF: Swift.String?
  public var personName: Swift.String?
  public var useAnalytics: Swift.Bool!
  public var requestTimeout: Foundation.TimeInterval!
  public var colorTheme: UIKit.UIColor!
  public var hasSound: Swift.Bool!
  public var showStepLabel: Swift.Bool!
  public var showStatusLabel: Swift.Bool!
  public var layout: PassiveFaceLiveness.PassiveFaceLivenessLayout?
  public var stabilityThreshold: Swift.Double!
  public var beforePictureInterval: Foundation.TimeInterval!
  public var proxySettings: PassiveFaceLiveness.ProxySettings?
  public var previewShow: Swift.Bool!
  public var previewTitle: Swift.String!
  public var previewSubtitle: Swift.String!
  public var previewConfirmLabel: Swift.String!
  public var previewRetryLabel: Swift.String!
  public var messageSettings: PassiveFaceLiveness.MessageSettings!
  public var getUrlExpireTime: Swift.String!
  public var enableManualCapture: Swift.Bool!
  public var manualCaptureTime: Foundation.TimeInterval!
  public var enableMultiLanguage: Swift.Bool!
  public var overlay: PassiveFaceLiveness.PassiveOverlayView!
  public var enableVideoCapture: Swift.Bool!
  public var timeVideoCapture: Foundation.TimeInterval!
  public var resolution: PassiveFaceLiveness.Resolution!
  public var compressionQuality: CoreGraphics.CGFloat!
  public var stage: PassiveFaceLiveness.CAFStage!
  public func encode(to encoder: Swift.Encoder) throws
  @objc open class Builder : ObjectiveC.NSObject {
    public init(mobileToken: Swift.String)
    open func setPersonId(personId: Swift.String?) -> PassiveFaceLiveness.PassiveFaceLivenessSdk.Builder
    open func setPersonCPF(personCPF: Swift.String?) -> PassiveFaceLiveness.PassiveFaceLivenessSdk.Builder
    open func setPersonName(personName: Swift.String?) -> PassiveFaceLiveness.PassiveFaceLivenessSdk.Builder
    open func setAnalyticsSettings(useAnalytics: Swift.Bool!) -> PassiveFaceLiveness.PassiveFaceLivenessSdk.Builder
    open func enableSound(enableSound: Swift.Bool) -> PassiveFaceLiveness.PassiveFaceLivenessSdk.Builder
    open func setNetworkSettings(requestTimeout: Foundation.TimeInterval) -> PassiveFaceLiveness.PassiveFaceLivenessSdk.Builder
    open func setColorTheme(color: UIKit.UIColor) -> PassiveFaceLiveness.PassiveFaceLivenessSdk.Builder
    open func showStepLabel(show: Swift.Bool) -> PassiveFaceLiveness.PassiveFaceLivenessSdk.Builder
    open func showStatusLabel(show: Swift.Bool) -> PassiveFaceLiveness.PassiveFaceLivenessSdk.Builder
    open func setLayout(layout: PassiveFaceLiveness.PassiveFaceLivenessLayout) -> PassiveFaceLiveness.PassiveFaceLivenessSdk.Builder
    open func setStabilitySensorSettings(stabilityThreshold: Swift.Double?) -> PassiveFaceLiveness.PassiveFaceLivenessSdk.Builder
    open func setProxySettings(proxySettings: PassiveFaceLiveness.ProxySettings?) -> PassiveFaceLiveness.PassiveFaceLivenessSdk.Builder
    open func showPreview(_ show: Swift.Bool, title: Swift.String? = nil, subtitle: Swift.String? = nil, confirmLabel: Swift.String? = nil, retryLabel: Swift.String? = nil) -> PassiveFaceLiveness.PassiveFaceLivenessSdk.Builder
    open func setMessageSettings(waitMessage: Swift.String? = nil, stepName: Swift.String? = nil, faceNotFoundMessage: Swift.String? = nil, faceTooFarMessage: Swift.String? = nil, faceNotFittedMessage: Swift.String? = nil, holdItMessage: Swift.String? = nil, invalidFaceMessage: Swift.String? = nil, multipleFaceDetectedMessage: Swift.String? = nil, sensorStabilityMessage: Swift.String? = nil) -> PassiveFaceLiveness.PassiveFaceLivenessSdk.Builder
    open func setGetImageUrlExpireTime(_ expireTime: Swift.String) -> PassiveFaceLiveness.PassiveFaceLivenessSdk.Builder
    open func enableMultiLanguage(_ enable: Swift.Bool) -> PassiveFaceLiveness.PassiveFaceLivenessSdk.Builder
    open func setOverlay(overlay: PassiveFaceLiveness.PassiveOverlayView) -> PassiveFaceLiveness.PassiveFaceLivenessSdk.Builder
    open func setImageCaptureSettings(beforePictureInterval: Foundation.TimeInterval!, enableManualCapture: Swift.Bool, timeManualCapture: Foundation.TimeInterval) -> PassiveFaceLiveness.PassiveFaceLivenessSdk.Builder
    open func setVideoCaptureSettings(time: Foundation.TimeInterval) -> PassiveFaceLiveness.PassiveFaceLivenessSdk.Builder
    open func setResolutionSettings(resolution: PassiveFaceLiveness.Resolution) -> PassiveFaceLiveness.PassiveFaceLivenessSdk.Builder
    open func setCompressSettings(compressionQuality: CoreGraphics.CGFloat) -> PassiveFaceLiveness.PassiveFaceLivenessSdk.Builder
    open func setStage(stage: PassiveFaceLiveness.CAFStage) -> PassiveFaceLiveness.PassiveFaceLivenessSdk.Builder
    open func build() -> PassiveFaceLiveness.PassiveFaceLivenessSdk
    @objc deinit
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class PassiveFaceLivenessLayout : ObjectiveC.NSObject {
  public var closeImage: UIKit.UIImage?
  public var font: Swift.String?
  @objc override dynamic public init()
  open func setFont(name: Swift.String)
  open func changeMaskImages(greenMask: UIKit.UIImage?, whiteMask: UIKit.UIImage?, redMask: UIKit.UIImage?)
  open func changeSoundImages(soundOn: UIKit.UIImage?, soundOff: UIKit.UIImage?)
  @objc deinit
}
public enum CAFStage {
  case BETA, PROD, OTHER
  public static func == (a: PassiveFaceLiveness.CAFStage, b: PassiveFaceLiveness.CAFStage) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc public class TokenVerificationResponse : ObjectiveC.NSObject {
  public var message: Swift.String!
  public var status: Swift.String!
  public init(dict: [Swift.String : Any])
  public func isValidToken() -> Swift.Bool
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class ServerReason : PassiveFaceLiveness.PassiveFaceLivenessFailure {
  public var code: Swift.Int!
  @objc deinit
}
extension PassiveFaceLiveness.MaskType : Swift.Equatable {}
extension PassiveFaceLiveness.MaskType : Swift.Hashable {}
extension PassiveFaceLiveness.Resolution : Swift.Equatable {}
extension PassiveFaceLiveness.Resolution : Swift.Hashable {}
extension PassiveFaceLiveness.CAFStage : Swift.Equatable {}
extension PassiveFaceLiveness.CAFStage : Swift.Hashable {}
