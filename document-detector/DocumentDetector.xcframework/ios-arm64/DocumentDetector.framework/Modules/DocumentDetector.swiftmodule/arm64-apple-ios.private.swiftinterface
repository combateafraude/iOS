// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name DocumentDetector
import AVFoundation
import AVKit
import Accelerate
import AdSupport
import CafSolutions
import CommonCrypto
import CommonCrypto/*.CC_LONG*/
import CommonCrypto/*.CC_MD5*/
import CommonCrypto/*.CC_MD5_DIGEST_LENGTH*/
import CoreImage
import CoreML
import CoreMedia
import CoreMotion
import CryptoKit
import DeveloperToolsSupport
@_exported import DocumentDetector
import Foundation
import ImageIO
import MobileCoreServices
import PDFKit
import Photos
import Security
import Swift
import SwiftUI
import TensorFlowLite
import UIKit
import UniformTypeIdentifiers
import VideoToolbox
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class CafDocumentDetectorFailure : ObjectiveC.NSObject, Swift.Encodable {
  public var message: Swift.String!
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
open class CafUploadSettings : Swift.Encodable {
  public var enable: Swift.Bool
  public var compress: Swift.Bool
  public var fileFormats: [DocumentDetector.CafFileFormat]
  public var maximumFileSize: Swift.Int
  public init(enable: Swift.Bool = true, compress: Swift.Bool = true, fileFormats: [DocumentDetector.CafFileFormat] = [.png, .jpeg, .heif, .pdf, .heic], maximumFileSize: Swift.Int = 10000000)
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
}
public enum CafFileFormat : Swift.String, Swift.Encodable {
  case png
  case jpeg
  case pdf
  case heif
  case heic
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc public enum CafCaptureMode : Swift.Int {
  case AUTOMATIC, MANUAL
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public class CafDocumentRetrievedOcr {
  public var fatherName: Swift.String?
  public var issuingCountry: Swift.String?
  public var mrz: Swift.String?
  public var motherName: Swift.String?
  public var birthDate: Swift.String?
  public var number: Swift.String?
  public var nationality: Swift.String?
  public var gender: Swift.String?
  public var expirationDate: Swift.String?
  public var processingTime: Swift.String?
  public var type: Swift.String?
  public var front_number: Swift.String?
  public var issueDate: Swift.String?
  public var name: Swift.String?
  public var naturality: Swift.String?
  public var issuingAuthority: Swift.String?
  public var acc: Swift.String?
  public var category: Swift.String?
  public var cpf: Swift.String?
  public var firstDriverLicenseDate: Swift.String?
  public var rgIssueState: Swift.String?
  public var filenameBack: Swift.String?
  public var filenameFront: Swift.String?
  public var placeOfIssue: Swift.String?
  public var mirrorNumber: Swift.String?
  public var registrationNumber: Swift.String?
  public var renachNumber: Swift.String?
  public var securityNumber: Swift.String?
  public var notes: Swift.String?
  public var rsIssuingAuthority: Swift.String?
  public var rg: Swift.String?
  public var cnhIssueState: Swift.String?
  public var rgMask: Swift.String?
  public var rgOrigin: Swift.String?
  public var issueDateMask: Swift.String?
  public var issueDateOrigin: Swift.String?
  public var nameOrigin: Swift.String?
  public var fatherNameOrigin: Swift.String?
  public var motherNameOrigin: Swift.String?
  public var birthPlace: Swift.String?
  public var birthDateMask: Swift.String?
  public var birthDateOrigin: Swift.String?
  public var referenceDocument: Swift.String?
  public var cpfMask: Swift.String?
  public var graphicName: Swift.String?
  public var parentsSeparator: Swift.String?
  public var issueState: Swift.String?
  public var rne: Swift.String?
  public var classification: Swift.String?
  public var validity: Swift.String?
  public var nativeCountry: Swift.String?
  public var deliveryDate: Swift.String?
  public var via: Swift.String?
  public var crlvNumber: Swift.String?
  public var renavamCode: Swift.String?
  public var rntrc: Swift.String?
  public var assignmentYear: Swift.String?
  public var cpfCnpj: Swift.String?
  public var plate: Swift.String?
  public var previousPlateAndState: Swift.String?
  public var chassis: Swift.String?
  public var fuel: Swift.String?
  public var brandAndModel: Swift.String?
  public var manufactureYear: Swift.String?
  public var modelYear: Swift.String?
  public var capacityPowerCilynders: Swift.String?
  public var predominantColor: Swift.String?
  public init(dict: [Swift.String : Any])
  @objc deinit
}
@objc public enum DDCAFStage : Swift.Int {
  case BETA, PROD, DEV
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers public class CafLabel : ObjectiveC.NSObject, Swift.Encodable {
  public static let BLANK: DocumentDetector.CafLabel
  public static let CNH_BACK: DocumentDetector.CafLabel
  public static let CNH_FRONT: DocumentDetector.CafLabel
  public static let CNH_FULL: DocumentDetector.CafLabel
  public static let CRLV: DocumentDetector.CafLabel
  public static let GENERIC: DocumentDetector.CafLabel
  public static let RG_BACK: DocumentDetector.CafLabel
  public static let RG_FRONT: DocumentDetector.CafLabel
  public static let RG_FULL: DocumentDetector.CafLabel
  public static let RG_NEW_BACK: DocumentDetector.CafLabel
  public static let RG_NEW_FRONT: DocumentDetector.CafLabel
  public static let RG_NEW_FULL: DocumentDetector.CafLabel
  public static let RNE_BACK: DocumentDetector.CafLabel
  public static let RNE_FRONT: DocumentDetector.CafLabel
  public static let RNM_BACK: DocumentDetector.CafLabel
  public static let RNM_FRONT: DocumentDetector.CafLabel
  public static let CTPS_FRONT: DocumentDetector.CafLabel
  public static let CTPS_BACK: DocumentDetector.CafLabel
  public static let PASSPORT: DocumentDetector.CafLabel
  public static let PASSPORT_FULL: DocumentDetector.CafLabel
  public static let CNH_NEW_BACK: DocumentDetector.CafLabel
  public static let CNH_NEW_FRONT: DocumentDetector.CafLabel
  public static let CNH_NEW_FULL: DocumentDetector.CafLabel
  public static let CRLV_NEW: DocumentDetector.CafLabel
  public static let CIN_BACK: DocumentDetector.CafLabel
  public static let CIN_FRONT: DocumentDetector.CafLabel
  public var scanLabel: Swift.String!
  public var documentType: Swift.String!
  public static func getScannedLabel(scanLabel: Swift.String) -> DocumentDetector.CafLabel?
  public func encode(to encoder: any Swift.Encoder) throws
  public static func allLabels() -> [DocumentDetector.CafLabel]
  public static func allScanLabels() -> [Swift.String]
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class CafLibraryReason : DocumentDetector.CafDocumentDetectorFailure {
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class DocumentDetectorResult : ObjectiveC.NSObject, Swift.Encodable {
  public var type: Swift.String!
  public var captures: [DocumentDetector.CafCapture]!
  public var trackingId: Swift.String?
  public static let LENS_FACING_FRONT: Swift.Int
  public static let LENS_FACING_BACK: Swift.Int
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc open class DocumentFeedbackColors : ObjectiveC.NSObject {
  public var defaultColor: UIKit.UIColor
  public var errorColor: UIKit.UIColor
  public var successColor: UIKit.UIColor
  public init(defaultColor: UIKit.UIColor, errorColor: UIKit.UIColor, successColor: UIKit.UIColor)
  @objc deinit
}
public enum CafResolution : Swift.String {
  case FULL_HD, ULTRA_HD
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension UIKit.UIImage {
  convenience public init?(pixelBuffer: CoreVideo.CVPixelBuffer)
}
@_hasMissingDesignatedInitializers @objc public class CafNetworkReason : DocumentDetector.CafDocumentDetectorFailure {
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class CafDocument : ObjectiveC.NSObject {
  public static let RG_FRONT: DocumentDetector.CafDocument
  public static let RG_BACK: DocumentDetector.CafDocument
  public static let RG_FULL: DocumentDetector.CafDocument
  public static let CNH_FRONT: DocumentDetector.CafDocument
  public static let CNH_BACK: DocumentDetector.CafDocument
  public static let CNH_FULL: DocumentDetector.CafDocument
  public static let CRLV: DocumentDetector.CafDocument
  public static let RNE_FRONT: DocumentDetector.CafDocument
  public static let RNE_BACK: DocumentDetector.CafDocument
  public static let CTPS_FRONT: DocumentDetector.CafDocument
  public static let CTPS_BACK: DocumentDetector.CafDocument
  public static let PASSPORT: DocumentDetector.CafDocument
  public static let ANY: DocumentDetector.CafDocument
  public var labels: [DocumentDetector.CafLabel]
  public var stepLabel: Swift.String!
  public var wrongDocumentFoundMessage: Swift.String!
  public var illustration: UIKit.UIImage!
  public var wrongDocumentText: Swift.String? {
    get
    set
  }
  public static func getByLabel(label: DocumentDetector.CafLabel) -> DocumentDetector.CafDocument?
  public static func allDocuments() -> [DocumentDetector.CafDocument]
  open func setDefaults()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class DocumentDetectorViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func clickButtonManualCapture()
  @objc @_Concurrency.MainActor(unsafe) public func cancelButtonClick()
  @objc deinit
}
extension DocumentDetector.DocumentDetectorViewController {
  @_Concurrency.MainActor(unsafe) public func captureOutput(_ output: AVFoundation.AVCaptureOutput, didOutput sampleBuffer: CoreMedia.CMSampleBuffer, from connection: AVFoundation.AVCaptureConnection)
  @_Concurrency.MainActor(unsafe) public func photoOutput(_ output: AVFoundation.AVCapturePhotoOutput, willCapturePhotoFor resolvedSettings: AVFoundation.AVCaptureResolvedPhotoSettings)
  @_Concurrency.MainActor(unsafe) public func photoOutput(_ output: AVFoundation.AVCapturePhotoOutput, didFinishProcessingPhoto photo: AVFoundation.AVCapturePhoto, error: (any Swift.Error)?)
}
public enum CafCountryCodes : Swift.String, Swift.CaseIterable {
  case ABW
  case AFG
  case AGO
  case AIA
  case ALA
  case ALB
  case AND
  case ARE
  case ARG
  case ARM
  case ASM
  case ATA
  case ATF
  case ATG
  case AUS
  case AUT
  case AZE
  case BDI
  case BEL
  case BEN
  case BES
  case BFA
  case BGD
  case BGR
  case BHR
  case BHS
  case BIH
  case BLM
  case BLR
  case BLZ
  case BMU
  case BOL
  case BRA
  case BRB
  case BRN
  case BTN
  case BVT
  case BWA
  case CAF
  case CAN
  case CCK
  case CHE
  case CHL
  case CIV
  case CMR
  case COD
  case COG
  case COK
  case COL
  case COM
  case CPV
  case CRI
  case CUB
  case CUW
  case CXR
  case CYM
  case CYP
  case CZE
  case DEU
  case DJI
  case DMA
  case DNK
  case DOM
  case DZA
  case ECU
  case EGY
  case ERI
  case ESH
  case ESP
  case EST
  case ETH
  case FIN
  case FJI
  case FLK
  case FRA
  case FRO
  case FSM
  case GAB
  case GBR
  case GEO
  case GGY
  case GHA
  case GIB
  case GIN
  case GLP
  case GMB
  case GNB
  case GNQ
  case GRC
  case GRD
  case GRL
  case GTM
  case GUF
  case GUM
  case GUY
  case HKG
  case HMD
  case HND
  case HRV
  case HTI
  case HUN
  case IDN
  case IMN
  case IND
  case IOT
  case IRL
  case IRN
  case IRQ
  case ISL
  case ISR
  case ITA
  case JAM
  case JEY
  case JOR
  case JPN
  case KAZ
  case KEN
  case KGZ
  case KHM
  case KIR
  case KNA
  case KOR
  case KWT
  case LAO
  case LBN
  case LBR
  case LBY
  case LCA
  case LIE
  case LKA
  case LSO
  case LTU
  case LUX
  case LVA
  case MAC
  case MAF
  case MAR
  case MCO
  case MDA
  case MDG
  case MDV
  case MEX
  case MHL
  case MKD
  case MLI
  case MLT
  case MMR
  case MNE
  case MNG
  case MNP
  case MOZ
  case MRT
  case MSR
  case MTQ
  case MUS
  case MWI
  case MYS
  case MYT
  case NAM
  case NCL
  case NER
  case NFK
  case NGA
  case NIC
  case NIU
  case NLD
  case NOR
  case NPL
  case NRU
  case NZL
  case OMN
  case PAK
  case PAN
  case PCN
  case PER
  case PHL
  case PLW
  case PNG
  case POL
  case PRI
  case PRK
  case PRT
  case PRY
  case PSE
  case PYF
  case QAT
  case REU
  case ROU
  case RUS
  case RWA
  case SAU
  case SDN
  case SEN
  case SGP
  case SGS
  case SHN
  case SJM
  case SLB
  case SLE
  case SLV
  case SMR
  case SOM
  case SPM
  case SRB
  case SSD
  case STP
  case SUR
  case SVK
  case SVN
  case SWE
  case SWZ
  case SXM
  case SYC
  case SYR
  case TCA
  case TCD
  case TGO
  case THA
  case TJK
  case TKL
  case TKM
  case TLS
  case TON
  case TTO
  case TUN
  case TUR
  case TUV
  case TWN
  case TZA
  case UGA
  case UKR
  case UMI
  case URY
  case USA
  case UZB
  case VAT
  case VCT
  case VEN
  case VGB
  case VIR
  case VNM
  case VUT
  case WLF
  case WSM
  case YEM
  case ZAF
  case ZMB
  case ZWE
  public init?(rawValue: Swift.String)
  public typealias AllCases = [DocumentDetector.CafCountryCodes]
  public typealias RawValue = Swift.String
  public static var allCases: [DocumentDetector.CafCountryCodes] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@objc open class DocumentDetectorStep : ObjectiveC.NSObject, Swift.Encodable {
  public var document: DocumentDetector.CafDocument!
  public var stepLabel: Swift.String!
  public var illustration: UIKit.UIImage!
  public var showStepLabel: Swift.Bool
  public init(document: DocumentDetector.CafDocument, stepLabel: Swift.String? = nil, illustration: UIKit.UIImage? = nil, showStepLabel: Swift.Bool = true)
  public func encode(to encoder: any Swift.Encoder) throws
  open func resetAttributesToDefault()
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) public class UploadValidationViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) convenience public init(documentDetector: DocumentDetector.DocumentDetectorSdk)
  @_Concurrency.MainActor(unsafe) public init(documentDetector: DocumentDetector.DocumentDetectorSdk, nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @objc deinit
}
extension DocumentDetector.UploadValidationViewController : UIKit.UIDocumentPickerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func documentPicker(_ controller: UIKit.UIDocumentPickerViewController, didPickDocumentsAt urls: [Foundation.URL])
  @_Concurrency.MainActor(unsafe) @objc dynamic public func documentPickerWasCancelled(_ controller: UIKit.UIDocumentPickerViewController)
}
extension DocumentDetector.UploadValidationViewController : UIKit.UIImagePickerControllerDelegate, UIKit.UINavigationControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func imagePickerController(_ picker: UIKit.UIImagePickerController, didFinishPickingMediaWithInfo info: [UIKit.UIImagePickerController.InfoKey : Any])
  @_Concurrency.MainActor(unsafe) @objc dynamic public func imagePickerControllerDidCancel(_ picker: UIKit.UIImagePickerController)
}
open class CafMessageSettings : Swift.Encodable {
  public init()
  open func setPassportCountryNotValid(message: Swift.String) -> DocumentDetector.CafMessageSettings
  open func setpassportCountryLoading(message: Swift.String) -> DocumentDetector.CafMessageSettings
  open func setWaitMessage(message: Swift.String) -> DocumentDetector.CafMessageSettings
  open func setFitTheDocumentMessage(message: Swift.String) -> DocumentDetector.CafMessageSettings
  open func setVerifyingQualityMessage(message: Swift.String) -> DocumentDetector.CafMessageSettings
  open func setLowQualityDocumentMessage(message: Swift.String) -> DocumentDetector.CafMessageSettings
  open func setUploadingImageMessage(message: Swift.String) -> DocumentDetector.CafMessageSettings
  open func setSensorLuminosityMessage(message: Swift.String) -> DocumentDetector.CafMessageSettings
  open func setSensorOrientationMessage(message: Swift.String) -> DocumentDetector.CafMessageSettings
  open func setManualCaptureMessage(message: Swift.String) -> DocumentDetector.CafMessageSettings
  open func setSensorStabilityMessage(message: Swift.String) -> DocumentDetector.CafMessageSettings
  public func setPopUpDocumentSubtitleMessage(message: Swift.String) -> DocumentDetector.CafMessageSettings
  public func setAiScanDocumentMessage(message: Swift.String) -> DocumentDetector.CafMessageSettings
  public func setAiGetCloserMessage(message: Swift.String) -> DocumentDetector.CafMessageSettings
  public func setAiCentralizeMessage(message: Swift.String) -> DocumentDetector.CafMessageSettings
  public func setAiMoveAwayMessage(message: Swift.String) -> DocumentDetector.CafMessageSettings
  public func setAiAlignDocumentMessage(message: Swift.String) -> DocumentDetector.CafMessageSettings
  public func setAiTurnDocumentMessage(message: Swift.String) -> DocumentDetector.CafMessageSettings
  public func setAiCapturedMessage(message: Swift.String) -> DocumentDetector.CafMessageSettings
  open func getPassportCountryNotValid() -> Swift.String!
  open func getpassportCountryLoading() -> Swift.String!
  open func getWaitMessage() -> Swift.String!
  open func getholdDocumentMessage() -> Swift.String
  open func getFitTheDocumentMessage() -> Swift.String!
  open func getVerifyingQualityMessage() -> Swift.String!
  open func getLowQualityDocumentMessage() -> Swift.String!
  open func getUploadingImageMessage() -> Swift.String!
  open func getSensorLuminosityMessage() -> Swift.String!
  open func getSensorOrientationMessage() -> Swift.String!
  open func getManualCaptureMessage() -> Swift.String!
  open func getSensorStabilityMessage() -> Swift.String!
  open func getPopUpDocumentSubtitleMessage() -> Swift.String
  open func getAiScanDocumentMessage() -> Swift.String!
  open func getAiGetCloserMessage() -> Swift.String
  open func getAiCentralizeMessage() -> Swift.String!
  open func getAiMoveAwayMessage() -> Swift.String
  open func getAiAlignDocumentMessage() -> Swift.String!
  open func getAiTurnDocumentMessage() -> Swift.String
  open func getAiCapturedMessage() -> Swift.String
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
}
public class CafUploadValidationMessage {
  public init(image: UIKit.UIImage? = nil, title: Swift.String, message: Swift.String = "", allowanceButtonTitle: Swift.String)
  @objc deinit
}
extension DocumentDetector.CafUploadValidationMessage {
  public static let allowPermissionMessage: DocumentDetector.CafUploadValidationMessage
  public static let deniedPermissionMessage: DocumentDetector.CafUploadValidationMessage
  public static let sendingPhotoMessage: DocumentDetector.CafUploadValidationMessage
  public static let completeSendingMessage: DocumentDetector.CafUploadValidationMessage
  public static let invalidFormatErrorMessage: DocumentDetector.CafUploadValidationMessage
  public static let invalidSizeErrorMessage: DocumentDetector.CafUploadValidationMessage
  public static let invalidDocumentErrorMessage: DocumentDetector.CafUploadValidationMessage
  public static let invalidFrontDocumentErrorWhenRequestedBackMessage: DocumentDetector.CafUploadValidationMessage
  public static let invalidFrontDocumentErrorWhenRequestedFullMessage: DocumentDetector.CafUploadValidationMessage
  public static let invalidBackDocumentErrorWhenRequestedFrontMessage: DocumentDetector.CafUploadValidationMessage
  public static let invalidBackDocumentErrorWhenRequestedFullMessage: DocumentDetector.CafUploadValidationMessage
  public static let invalidFullDocumentErrorWhenRequestedFrontMessage: DocumentDetector.CafUploadValidationMessage
  public static let invalidFullDocumentErrorWhenRequestedBackMessage: DocumentDetector.CafUploadValidationMessage
  public static let invalidQualityErrorMessage: DocumentDetector.CafUploadValidationMessage
}
extension DocumentDetector.CafUploadValidationMessage : Swift.Equatable {
  public static func == (lhs: DocumentDetector.CafUploadValidationMessage, rhs: DocumentDetector.CafUploadValidationMessage) -> Swift.Bool
}
@objc public enum CafMask : Swift.Int {
  case normal
  case success
  case error
  case manual
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol DocumentDetectorControllerDelegate : ObjectiveC.NSObjectProtocol {
  @objc func documentDetectionController(_ scanner: DocumentDetector.DocumentDetectorController, didFinishWithResults results: DocumentDetector.DocumentDetectorResult)
  @objc func documentDetectionControllerDidCancel(_ scanner: DocumentDetector.DocumentDetectorController)
  @objc func documentDetectionController(_ scanner: DocumentDetector.DocumentDetectorController, didFailWithError error: DocumentDetector.CafDocumentDetectorFailure)
}
@objc(DocumentDetectorController) @_Concurrency.MainActor(unsafe) open class DocumentDetectorController : UIKit.UINavigationController {
  @objc @_Concurrency.MainActor(unsafe) weak public var documentDetectorDelegate: (any DocumentDetector.DocumentDetectorControllerDelegate)?
  @objc @_Concurrency.MainActor(unsafe) required public init(documentDetector: DocumentDetector.DocumentDetectorSdk)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class DocumentDetectorSdk : ObjectiveC.NSObject, Swift.Encodable {
  public var mobileToken: Swift.String!
  public var personId: Swift.String?
  public var useAnalytics: Swift.Bool!
  public var requestTimeout: Foundation.TimeInterval!
  public var showPopup: Swift.Bool!
  public var documentDetectorFlow: [DocumentDetector.DocumentDetectorStep]!
  public var documentDetectorLayout: DocumentDetector.DocumentDetectorLayout?
  public var shouldUpload: Swift.Bool!
  public var orientationThreshold: Swift.Double!
  public var stabilityThreshold: Swift.Double!
  public var luminosityThreshold: Swift.Float!
  public var proxySettings: DocumentDetector.CafProxySettings?
  public var previewShow: Swift.Bool!
  public var previewTitle: Swift.String!
  public var previewSubtitle: Swift.String!
  public var previewConfirmLabel: Swift.String!
  public var previewRetryLabel: Swift.String!
  public var messageSettings: DocumentDetector.CafMessageSettings!
  public var getUrlExpireTime: Swift.String!
  public var enableManualCapture: Swift.Bool!
  public var manualCaptureTime: Foundation.TimeInterval!
  public var enableMultiLanguage: Swift.Bool!
  public var resolution: DocumentDetector.CafResolution!
  public var compressionQuality: CoreFoundation.CGFloat!
  public var currentStepDoneDelay: Foundation.TimeInterval!
  public var uploadSettings: DocumentDetector.CafUploadSettings!
  public var stage: DocumentDetector.DDCAFStage!
  public var allowedPassportCountryList: [DocumentDetector.CafCountryCodes]?
  public var sdkType: DocumentDetector.CafSdkType {
    get
    set
  }
  public func encode(to encoder: any Swift.Encoder) throws
  @objc open class CafBuilder : ObjectiveC.NSObject {
    public init(mobileToken: Swift.String)
    open func setAllowedPassportList(passportList: [DocumentDetector.CafCountryCodes]) -> DocumentDetector.DocumentDetectorSdk.CafBuilder
    open func setPersonId(personId: Swift.String?) -> DocumentDetector.DocumentDetectorSdk.CafBuilder
    open func setAnalyticsSettings(useAnalytics: Swift.Bool!) -> DocumentDetector.DocumentDetectorSdk.CafBuilder
    open func setNetworkSettings(requestTimeout: Foundation.TimeInterval) -> DocumentDetector.DocumentDetectorSdk.CafBuilder
    open func setPopupSettings(show: Swift.Bool) -> DocumentDetector.DocumentDetectorSdk.CafBuilder
    open func setDocumentCaptureFlow(flow: [DocumentDetector.DocumentDetectorStep]) -> DocumentDetector.DocumentDetectorSdk.CafBuilder
    open func setLayout(layout: DocumentDetector.DocumentDetectorLayout) -> DocumentDetector.DocumentDetectorSdk.CafBuilder
    open func setLuminositySensorSettings(luminosityThreshold: Swift.Float?) -> DocumentDetector.DocumentDetectorSdk.CafBuilder
    open func setOrientationSensorSettings(orientationThreshold: Swift.Double?) -> DocumentDetector.DocumentDetectorSdk.CafBuilder
    open func setStabilitySensorSettings(stabilityThreshold: Swift.Double?) -> DocumentDetector.DocumentDetectorSdk.CafBuilder
    open func setProxySettings(proxySettings: DocumentDetector.CafProxySettings?) -> DocumentDetector.DocumentDetectorSdk.CafBuilder
    open func showPreview(_ show: Swift.Bool, title: Swift.String? = nil, subtitle: Swift.String? = nil, confirmLabel: Swift.String? = nil, retryLabel: Swift.String? = nil) -> DocumentDetector.DocumentDetectorSdk.CafBuilder
    open func setMessageSettings(waitMessage: Swift.String? = nil, fitTheDocumentMessage: Swift.String? = nil, verifyingQualityMessage: Swift.String? = nil, lowQualityDocumentMessage: Swift.String? = nil, uploadingImageMessage: Swift.String? = nil, popupDocumentSubtitleMessage: Swift.String? = nil, unsupportedDocumentMessage: Swift.String? = nil, wrongDocumentMessage: Swift.String? = nil, sensorLuminosityMessage: Swift.String? = nil, sensorOrientationMessage: Swift.String? = nil, sensorStabilityMessage: Swift.String? = nil, predictorScanDocumentMessage: Swift.String? = nil, predictorGetCloserMessage: Swift.String? = nil, predictorCentralizeMessage: Swift.String? = nil, predictorMoveAwayMessage: Swift.String? = nil, predictorAlignDocumentMessage: Swift.String? = nil, predictorTurnDocumentMessage: Swift.String? = nil, predictorCapturedMessage: Swift.String? = nil) -> DocumentDetector.DocumentDetectorSdk.CafBuilder
    open func setGetImageUrlExpireTime(_ expireTime: Swift.String) -> DocumentDetector.DocumentDetectorSdk.CafBuilder
    open func setManualCaptureSettings(enable: Swift.Bool, time: Foundation.TimeInterval) -> DocumentDetector.DocumentDetectorSdk.CafBuilder
    open func enableMultiLanguage(_ enable: Swift.Bool) -> DocumentDetector.DocumentDetectorSdk.CafBuilder
    open func setResolutionSettings(resolution: DocumentDetector.CafResolution) -> DocumentDetector.DocumentDetectorSdk.CafBuilder
    open func setCompressSettings(compressionQuality: CoreFoundation.CGFloat) -> DocumentDetector.DocumentDetectorSdk.CafBuilder
    open func setCurrentStepDoneDelay(currentStepDoneDelay: Foundation.TimeInterval) -> DocumentDetector.DocumentDetectorSdk.CafBuilder
    open func setUploadSettings(uploadSettings: DocumentDetector.CafUploadSettings) -> DocumentDetector.DocumentDetectorSdk.CafBuilder
    open func setStage(stage: DocumentDetector.DDCAFStage) -> DocumentDetector.DocumentDetectorSdk.CafBuilder
    open func build() -> DocumentDetector.DocumentDetectorSdk
    @objc deinit
  }
  @objc deinit
}
@objc public class CafServerFailureResponse : ObjectiveC.NSObject {
  public var message: Swift.String?
  public init(response: [Swift.String : Any])
  @objc deinit
}
public enum CAFStage : Swift.Int {
  case dev
  case beta
  case prod
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum CafSdkType : Swift.String {
  case native
  case reactNative
  case flutter
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct CafSDKFailure {
  public init(errorType: DocumentDetector.CafErrorType?, description: Swift.String?)
  public let errorType: DocumentDetector.CafErrorType?
  public let description: Swift.String?
}
public enum CafErrorType : Swift.String {
  case unsupportedDevice
  case cameraPermission
  case networkException
  case serverException
  case tokenException
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class CafPermissionReason : DocumentDetector.CafDocumentDetectorFailure {
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class CafInvalidTokenReason : DocumentDetector.CafDocumentDetectorFailure {
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class CafCapture : ObjectiveC.NSObject, Swift.Encodable {
  public var image: UIKit.UIImage
  public var label: Swift.String?
  public var imageUrl: Swift.String?
  public var quality: Swift.Double!
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @objc open class DocumentDetectorLayout : ObjectiveC.NSObject {
  public var closeButtonImage: UIKit.UIImage?
  public var closeButtonSize: CoreFoundation.CGFloat?
  public var closeButtonColor: UIKit.UIColor?
  public var closeButtonContentMode: UIKit.UIView.ContentMode?
  public var primaryColor: UIKit.UIColor
  public var feedbackColors: DocumentDetector.DocumentFeedbackColors
  public var font: Swift.String?
  @objc override dynamic public init()
  open func setFont(name: Swift.String)
  open func setCloseButtonSize(size: CoreFoundation.CGFloat)
  open func setCloseButtonColor(color: UIKit.UIColor)
  open func setCloseButtonImageImage(image: UIKit.UIImage)
  open func setCloseButtonContentMode(mode: UIKit.UIView.ContentMode)
  open func setPrimaryColor(color: UIKit.UIColor)
  open func setFeedbackColors(colors: DocumentDetector.DocumentFeedbackColors)
  @objc deinit
}
public class CafImageUploadResponseBody : Swift.Encodable {
  public var uploadUrl: Swift.String?
  public var imageUploadRetrieveData: DocumentDetector.CafImageUploadResponseBody.CafImageUploadRetrieveData?
  public init(dict: [Swift.String : Any]?)
  public struct CafImageUploadRetrieveData : Swift.Encodable {
    public func encode(to encoder: any Swift.Encoder) throws
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers @objc public class CafServerReason : DocumentDetector.CafDocumentDetectorFailure {
  public var code: Swift.Int!
  @objc deinit
}
@objc open class CafProxySettings : ObjectiveC.NSObject {
  public var hostname: Swift.String!
  public var port: Swift.Int!
  public var user: Swift.String?
  public var password: Swift.String?
  public init(hostname: Swift.String, port: Swift.Int)
  open func setAutentication(user: Swift.String, password: Swift.String) -> DocumentDetector.CafProxySettings
  @objc deinit
}
extension DocumentDetector.CafFileFormat : Swift.Equatable {}
extension DocumentDetector.CafFileFormat : Swift.Hashable {}
extension DocumentDetector.CafFileFormat : Swift.RawRepresentable {}
extension DocumentDetector.CafCaptureMode : Swift.Equatable {}
extension DocumentDetector.CafCaptureMode : Swift.Hashable {}
extension DocumentDetector.CafCaptureMode : Swift.RawRepresentable {}
extension DocumentDetector.DDCAFStage : Swift.Equatable {}
extension DocumentDetector.DDCAFStage : Swift.Hashable {}
extension DocumentDetector.DDCAFStage : Swift.RawRepresentable {}
extension DocumentDetector.CafResolution : Swift.Equatable {}
extension DocumentDetector.CafResolution : Swift.Hashable {}
extension DocumentDetector.CafResolution : Swift.RawRepresentable {}
extension DocumentDetector.CafCountryCodes : Swift.Equatable {}
extension DocumentDetector.CafCountryCodes : Swift.Hashable {}
extension DocumentDetector.CafCountryCodes : Swift.RawRepresentable {}
extension DocumentDetector.CafMask : Swift.Equatable {}
extension DocumentDetector.CafMask : Swift.Hashable {}
extension DocumentDetector.CafMask : Swift.RawRepresentable {}
extension DocumentDetector.CAFStage : Swift.Equatable {}
extension DocumentDetector.CAFStage : Swift.Hashable {}
extension DocumentDetector.CAFStage : Swift.RawRepresentable {}
extension DocumentDetector.CafSdkType : Swift.Equatable {}
extension DocumentDetector.CafSdkType : Swift.Hashable {}
extension DocumentDetector.CafSdkType : Swift.RawRepresentable {}
extension DocumentDetector.CafErrorType : Swift.Equatable {}
extension DocumentDetector.CafErrorType : Swift.Hashable {}
extension DocumentDetector.CafErrorType : Swift.RawRepresentable {}
