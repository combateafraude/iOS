// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name DocumentDetector
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AVKit
import Accelerate
import AdSupport
import CommonCrypto
import CommonCrypto/*.CC_LONG*/
import CommonCrypto/*.CC_MD5*/
import CommonCrypto/*.CC_MD5_DIGEST_LENGTH*/
import CoreImage
import CoreML
import CoreMedia
import CoreMotion
import CryptoKit
@_exported import DocumentDetector
import Foundation
import ImageIO
import MobileCoreServices
import PDFKit
import Photos
import Swift
import TensorFlowLite
import UIKit
import VideoToolbox
import _Concurrency
import _StringProcessing
@objc @_Concurrency.MainActor(unsafe) open class DocumentOverlayView : UIKit.UIView, DocumentDetector.DocumentDetectorCustomViewControllerDelegate {
  @_Concurrency.MainActor(unsafe) open func show(loading show: Swift.Bool)
  @_Concurrency.MainActor(unsafe) open func show(message text: Swift.String)
  @_Concurrency.MainActor(unsafe) open func show(stepName text: Swift.String)
  @_Concurrency.MainActor(unsafe) open func show(mask type: DocumentDetector.Mask)
  @_Concurrency.MainActor(unsafe) open func show(manualCaptureButton hidden: Swift.Bool, reset: Swift.Bool)
  @_Concurrency.MainActor(unsafe) open func loading(status: Swift.Bool)
  @_Concurrency.MainActor(unsafe) open func readyToCapture(status: Swift.Bool)
  @_Concurrency.MainActor(unsafe) open func stepDoneSuccessfully(status: Swift.Bool)
  @_Concurrency.MainActor(unsafe) open func captureMode(status: DocumentDetector.CaptureMode)
  @_Concurrency.MainActor(unsafe) open func mask(status: DocumentDetector.Mask, visibility: Swift.Bool)
  @_Concurrency.MainActor(unsafe) open func popup(visibility: Swift.Bool)
  @_Concurrency.MainActor(unsafe) open func manualCaptureButton(visibility: Swift.Bool)
  @_Concurrency.MainActor(unsafe) open func switchCameraButton(visibility: Swift.Bool)
  @_Concurrency.MainActor(unsafe) open func preview(visibility: Swift.Bool)
  @_Concurrency.MainActor(unsafe) open func status(message: Swift.String, visibility: Swift.Bool)
  @_Concurrency.MainActor(unsafe) open func validationFailure(status: Swift.Bool, id: DocumentDetector.ValidationFailure?)
  @_Concurrency.MainActor(unsafe) open func currentStep(name: Swift.String)
  @_Concurrency.MainActor(unsafe) open func documentDetectionController(didFinishWithResults results: DocumentDetector.DocumentDetectorResult)
  @_Concurrency.MainActor(unsafe) open func documentDetectionControllerDidCancel()
  @_Concurrency.MainActor(unsafe) open func documentDetectionController(didFailWithError error: DocumentDetector.DocumentDetectorFailure)
  @_Concurrency.MainActor(unsafe) weak public var viewController: DocumentDetector.DocumentDetectorViewController?
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open func updateOverlay(newSize: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) open func setCurrentAction(text: Swift.String)
  @_Concurrency.MainActor(unsafe) open func updateCenterIcon(mask type: DocumentDetector.Mask)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class DocumentDetectorFailure : ObjectiveC.NSObject, Swift.Encodable {
  public var message: Swift.String!
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc open class UploadSettings : ObjectiveC.NSObject {
  public var enable: Swift.Bool
  public var compress: Swift.Bool
  public var fileFormats: [DocumentDetector.FileFormat]
  public var maximumFileSize: Swift.Int
  public init(enable: Swift.Bool = true, compress: Swift.Bool = true, fileFormats: [DocumentDetector.FileFormat] = [.png, .jpeg, .pdf], maximumFileSize: Swift.Int = 10000000)
  @objc deinit
}
public enum FileFormat : Swift.String {
  case png
  case jpeg
  case pdf
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc public enum CaptureMode : Swift.Int {
  case AUTOMATIC, MANUAL
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public class DocumentRetrievedOcr {
  public var fatherName: Swift.String?
  public var issuingCountry: Swift.String?
  public var mrz: Swift.String?
  public var motherName: Swift.String?
  public var birthDate: Swift.String?
  public var number: Swift.String?
  public var nationality: Swift.String?
  public var gender: Swift.String?
  public var expirationDate: Swift.String?
  public var processingTime: Swift.String?
  public var type: Swift.String?
  public var front_number: Swift.String?
  public var issueDate: Swift.String?
  public var name: Swift.String?
  public var naturality: Swift.String?
  public var issuingAuthority: Swift.String?
  public var acc: Swift.String?
  public var category: Swift.String?
  public var cpf: Swift.String?
  public var firstDriverLicenseDate: Swift.String?
  public var rgIssueState: Swift.String?
  public var filenameBack: Swift.String?
  public var filenameFront: Swift.String?
  public var placeOfIssue: Swift.String?
  public var mirrorNumber: Swift.String?
  public var registrationNumber: Swift.String?
  public var renachNumber: Swift.String?
  public var securityNumber: Swift.String?
  public var notes: Swift.String?
  public var rsIssuingAuthority: Swift.String?
  public var rg: Swift.String?
  public var cnhIssueState: Swift.String?
  public var rgMask: Swift.String?
  public var rgOrigin: Swift.String?
  public var issueDateMask: Swift.String?
  public var issueDateOrigin: Swift.String?
  public var nameOrigin: Swift.String?
  public var fatherNameOrigin: Swift.String?
  public var motherNameOrigin: Swift.String?
  public var birthPlace: Swift.String?
  public var birthDateMask: Swift.String?
  public var birthDateOrigin: Swift.String?
  public var referenceDocument: Swift.String?
  public var cpfMask: Swift.String?
  public var graphicName: Swift.String?
  public var parentsSeparator: Swift.String?
  public var issueState: Swift.String?
  public var rne: Swift.String?
  public var classification: Swift.String?
  public var validity: Swift.String?
  public var nativeCountry: Swift.String?
  public var deliveryDate: Swift.String?
  public var via: Swift.String?
  public var crlvNumber: Swift.String?
  public var renavamCode: Swift.String?
  public var rntrc: Swift.String?
  public var assignmentYear: Swift.String?
  public var cpfCnpj: Swift.String?
  public var plate: Swift.String?
  public var previousPlateAndState: Swift.String?
  public var chassis: Swift.String?
  public var fuel: Swift.String?
  public var brandAndModel: Swift.String?
  public var manufactureYear: Swift.String?
  public var modelYear: Swift.String?
  public var capacityPowerCilynders: Swift.String?
  public var predominantColor: Swift.String?
  public init(dict: [Swift.String : Any])
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class DocumentValidator : ObjectiveC.NSObject {
  public var isDocumentDetected: Swift.Bool!
  public var isPhoneInHorizontal: Swift.Bool!
  public var isPhoneStable: Swift.Bool!
  public var errorStatus: Swift.String!
  public var missedAttemps: Swift.Int!
  public var lastLabelScanned: DocumentDetector.Label!
  @objc override dynamic public init()
  @objc deinit
}
public struct Prediction {
  public typealias ImagePredictorHandler = (DocumentDetector.Prediction) -> Swift.Void
}
@objc public enum CAFStage : Swift.Int {
  case BETA, PROD, DEV
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers public class Label : ObjectiveC.NSObject, Swift.Encodable {
  public static let BLANK: DocumentDetector.Label
  public static let CNH_BACK: DocumentDetector.Label
  public static let CNH_FRONT: DocumentDetector.Label
  public static let CNH_FULL: DocumentDetector.Label
  public static let CRLV: DocumentDetector.Label
  public static let GENERIC: DocumentDetector.Label
  public static let RG_BACK: DocumentDetector.Label
  public static let RG_FRONT: DocumentDetector.Label
  public static let RG_FULL: DocumentDetector.Label
  public static let RG_NEW_BACK: DocumentDetector.Label
  public static let RG_NEW_FRONT: DocumentDetector.Label
  public static let RG_NEW_FULL: DocumentDetector.Label
  public static let RNE_BACK: DocumentDetector.Label
  public static let RNE_FRONT: DocumentDetector.Label
  public static let RNM_BACK: DocumentDetector.Label
  public static let RNM_FRONT: DocumentDetector.Label
  public static let CTPS_FRONT: DocumentDetector.Label
  public static let CTPS_BACK: DocumentDetector.Label
  public static let PASSPORT: DocumentDetector.Label
  public static let PASSPORT_FULL: DocumentDetector.Label
  public static let CNH_NEW_BACK: DocumentDetector.Label
  public static let CNH_NEW_FRONT: DocumentDetector.Label
  public static let CNH_NEW_FULL: DocumentDetector.Label
  public static let CRLV_NEW: DocumentDetector.Label
  public static let CIN_BACK: DocumentDetector.Label
  public static let CIN_FRONT: DocumentDetector.Label
  public var scanLabel: Swift.String!
  public var documentType: Swift.String!
  public static func getScannedLabel(scanLabel: Swift.String) -> DocumentDetector.Label?
  public func encode(to encoder: any Swift.Encoder) throws
  public static func allLabels() -> [DocumentDetector.Label]
  public static func allScanLabels() -> [Swift.String]
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class Api : ObjectiveC.NSObject {
  public var relativeUrl: Swift.String
  public var method: Swift.String
  public var headers: [Swift.String]
  public func getUrl(pathParam: Swift.String = "") -> Swift.String
  public func addPathParamIn(url: Swift.String, path: Swift.String) -> Swift.String
  public func addQueryParamIn(url: Swift.String, name: Swift.String, value: Swift.String) -> Swift.String
  public func getUrlWithQueryParam(name: Swift.String = "", value: Swift.String = "") -> Swift.String
  public func getHMACSecret() -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class LibraryReason : DocumentDetector.DocumentDetectorFailure {
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class DocumentDetectorResult : ObjectiveC.NSObject, Swift.Encodable {
  public var type: Swift.String!
  public var captures: [DocumentDetector.Capture]!
  public var trackingId: Swift.String?
  public static let LENS_FACING_FRONT: Swift.Int
  public static let LENS_FACING_BACK: Swift.Int
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc open class DocumentFeedbackColors : ObjectiveC.NSObject {
  public var defaultColor: UIKit.UIColor
  public var errorColor: UIKit.UIColor
  public var successColor: UIKit.UIColor
  public init(defaultColor: UIKit.UIColor, errorColor: UIKit.UIColor, successColor: UIKit.UIColor)
  @objc deinit
}
@objc public enum Resolution : Swift.Int {
  case FULL_HD, ULTRA_HD
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class NetworkReason : DocumentDetector.DocumentDetectorFailure {
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class Document : ObjectiveC.NSObject {
  public static let RG_FRONT: DocumentDetector.Document
  public static let RG_BACK: DocumentDetector.Document
  public static let RG_FULL: DocumentDetector.Document
  public static let CNH_FRONT: DocumentDetector.Document
  public static let CNH_BACK: DocumentDetector.Document
  public static let CNH_FULL: DocumentDetector.Document
  public static let CRLV: DocumentDetector.Document
  public static let RNE_FRONT: DocumentDetector.Document
  public static let RNE_BACK: DocumentDetector.Document
  public static let CTPS_FRONT: DocumentDetector.Document
  public static let CTPS_BACK: DocumentDetector.Document
  public static let PASSPORT: DocumentDetector.Document
  public static let ANY: DocumentDetector.Document
  public var labels: [DocumentDetector.Label]
  public var stepLabel: Swift.String!
  public var wrongDocumentFoundMessage: Swift.String!
  public var illustration: UIKit.UIImage!
  public var wrongDocumentText: Swift.String? {
    get
    set
  }
  public static func getByLabel(label: DocumentDetector.Label) -> DocumentDetector.Document?
  public static func allDocuments() -> [DocumentDetector.Document]
  open func setDefaults()
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, *)
public class UploadValidationViewModel {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class AnalyticsApi : DocumentDetector.Api {
  public static func REQUEST_TRACKING_ID(with documentDetector: DocumentDetector.DocumentDetectorSdk) -> DocumentDetector.MobileApi
  public static func ADD_EVENT(with documentDetector: DocumentDetector.DocumentDetectorSdk) -> DocumentDetector.MobileApi
  @objc deinit
}
@objc public enum ValidationFailure : Swift.Int {
  case SENSOR_LUMINOSITY_FAILURE, SENSOR_ORIENTATION_FAILURE, SENSOR_STABILITY_FAILURE, FRAMING_FAILURE, TYPIFICATION_FAILURE, QUALITY_FAILURE
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class DocumentDetectorViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func clickButtonManualCapture()
  @objc @_Concurrency.MainActor(unsafe) public func cancelButtonClick()
  @objc deinit
}
extension UIKit.UIImage {
  convenience public init?(pixelBuffer: CoreVideo.CVPixelBuffer)
}
extension DocumentDetector.DocumentDetectorViewController {
  @_Concurrency.MainActor(unsafe) public func captureOutput(_ output: AVFoundation.AVCaptureOutput, didOutput sampleBuffer: CoreMedia.CMSampleBuffer, from connection: AVFoundation.AVCaptureConnection)
  @_Concurrency.MainActor(unsafe) public func photoOutput(_ output: AVFoundation.AVCapturePhotoOutput, willCapturePhotoFor resolvedSettings: AVFoundation.AVCaptureResolvedPhotoSettings)
  @_Concurrency.MainActor(unsafe) public func photoOutput(_ output: AVFoundation.AVCapturePhotoOutput, didFinishProcessingPhoto photo: AVFoundation.AVCapturePhoto, error: (any Swift.Error)?)
}
public enum CountryCodes : Swift.String {
  case ABW
  case AFG
  case AGO
  case AIA
  case ALA
  case ALB
  case AND
  case ARE
  case ARG
  case ARM
  case ASM
  case ATA
  case ATF
  case ATG
  case AUS
  case AUT
  case AZE
  case BDI
  case BEL
  case BEN
  case BES
  case BFA
  case BGD
  case BGR
  case BHR
  case BHS
  case BIH
  case BLM
  case BLR
  case BLZ
  case BMU
  case BOL
  case BRA
  case BRB
  case BRN
  case BTN
  case BVT
  case BWA
  case CAF
  case CAN
  case CCK
  case CHE
  case CHL
  case CIV
  case CMR
  case COD
  case COG
  case COK
  case COL
  case COM
  case CPV
  case CRI
  case CUB
  case CUW
  case CXR
  case CYM
  case CYP
  case CZE
  case DEU
  case DJI
  case DMA
  case DNK
  case DOM
  case DZA
  case ECU
  case EGY
  case ERI
  case ESH
  case ESP
  case EST
  case ETH
  case FIN
  case FJI
  case FLK
  case FRA
  case FRO
  case FSM
  case GAB
  case GBR
  case GEO
  case GGY
  case GHA
  case GIB
  case GIN
  case GLP
  case GMB
  case GNB
  case GNQ
  case GRC
  case GRD
  case GRL
  case GTM
  case GUF
  case GUM
  case GUY
  case HKG
  case HMD
  case HND
  case HRV
  case HTI
  case HUN
  case IDN
  case IMN
  case IND
  case IOT
  case IRL
  case IRN
  case IRQ
  case ISL
  case ISR
  case ITA
  case JAM
  case JEY
  case JOR
  case JPN
  case KAZ
  case KEN
  case KGZ
  case KHM
  case KIR
  case KNA
  case KOR
  case KWT
  case LAO
  case LBN
  case LBR
  case LBY
  case LCA
  case LIE
  case LKA
  case LSO
  case LTU
  case LUX
  case LVA
  case MAC
  case MAF
  case MAR
  case MCO
  case MDA
  case MDG
  case MDV
  case MEX
  case MHL
  case MKD
  case MLI
  case MLT
  case MMR
  case MNE
  case MNG
  case MNP
  case MOZ
  case MRT
  case MSR
  case MTQ
  case MUS
  case MWI
  case MYS
  case MYT
  case NAM
  case NCL
  case NER
  case NFK
  case NGA
  case NIC
  case NIU
  case NLD
  case NOR
  case NPL
  case NRU
  case NZL
  case OMN
  case PAK
  case PAN
  case PCN
  case PER
  case PHL
  case PLW
  case PNG
  case POL
  case PRI
  case PRK
  case PRT
  case PRY
  case PSE
  case PYF
  case QAT
  case REU
  case ROU
  case RUS
  case RWA
  case SAU
  case SDN
  case SEN
  case SGP
  case SGS
  case SHN
  case SJM
  case SLB
  case SLE
  case SLV
  case SMR
  case SOM
  case SPM
  case SRB
  case SSD
  case STP
  case SUR
  case SVK
  case SVN
  case SWE
  case SWZ
  case SXM
  case SYC
  case SYR
  case TCA
  case TCD
  case TGO
  case THA
  case TJK
  case TKL
  case TKM
  case TLS
  case TON
  case TTO
  case TUN
  case TUR
  case TUV
  case TWN
  case TZA
  case UGA
  case UKR
  case UMI
  case URY
  case USA
  case UZB
  case VAT
  case VCT
  case VEN
  case VGB
  case VIR
  case VNM
  case VUT
  case WLF
  case WSM
  case YEM
  case ZAF
  case ZMB
  case ZWE
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc public enum MaskType : Swift.Int {
  case standard
  case empty
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc open class DocumentDetectorStep : ObjectiveC.NSObject, Swift.Encodable {
  public var document: DocumentDetector.Document!
  public var stepLabel: Swift.String!
  public var illustration: UIKit.UIImage!
  public var showStepLabel: Swift.Bool
  public init(document: DocumentDetector.Document, stepLabel: Swift.String? = nil, illustration: UIKit.UIImage? = nil, audio: Foundation.URL? = nil, showStepLabel: Swift.Bool = true)
  public func encode(to encoder: any Swift.Encoder) throws
  open func resetAttributesToDefault()
  @objc deinit
}
@objc @available(iOS 13.0, *)
@_Concurrency.MainActor(unsafe) public class UploadValidationViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) convenience public init(documentDetector: DocumentDetector.DocumentDetectorSdk)
  @_Concurrency.MainActor(unsafe) public init(documentDetector: DocumentDetector.DocumentDetectorSdk, nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @objc deinit
}
@available(iOS 13.0, *)
extension DocumentDetector.UploadValidationViewController : UIKit.UIDocumentPickerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func documentPicker(_ controller: UIKit.UIDocumentPickerViewController, didPickDocumentsAt urls: [Foundation.URL])
  @_Concurrency.MainActor(unsafe) @objc dynamic public func documentPickerWasCancelled(_ controller: UIKit.UIDocumentPickerViewController)
}
@available(iOS 13.0, *)
extension DocumentDetector.UploadValidationViewController : UIKit.UIImagePickerControllerDelegate, UIKit.UINavigationControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func imagePickerController(_ picker: UIKit.UIImagePickerController, didFinishPickingMediaWithInfo info: [UIKit.UIImagePickerController.InfoKey : Any])
  @_Concurrency.MainActor(unsafe) @objc dynamic public func imagePickerControllerDidCancel(_ picker: UIKit.UIImagePickerController)
}
@_inheritsConvenienceInitializers @objc open class MessageSettings : ObjectiveC.NSObject {
  @objc override dynamic public init()
  open func setPassportCountryNotValid(message: Swift.String) -> DocumentDetector.MessageSettings
  open func setpassportCountryLoading(message: Swift.String) -> DocumentDetector.MessageSettings
  open func setWaitMessage(message: Swift.String) -> DocumentDetector.MessageSettings
  open func setFitTheDocumentMessage(message: Swift.String) -> DocumentDetector.MessageSettings
  open func setVerifyingQualityMessage(message: Swift.String) -> DocumentDetector.MessageSettings
  open func setLowQualityDocumentMessage(message: Swift.String) -> DocumentDetector.MessageSettings
  open func setUploadingImageMessage(message: Swift.String) -> DocumentDetector.MessageSettings
  open func setSensorLuminosityMessage(message: Swift.String) -> DocumentDetector.MessageSettings
  open func setSensorOrientationMessage(message: Swift.String) -> DocumentDetector.MessageSettings
  open func setManualCaptureMessage(message: Swift.String) -> DocumentDetector.MessageSettings
  open func setSensorStabilityMessage(message: Swift.String) -> DocumentDetector.MessageSettings
  public func setPopUpDocumentSubtitleMessage(message: Swift.String) -> DocumentDetector.MessageSettings
  public func setAiScanDocumentMessage(message: Swift.String) -> DocumentDetector.MessageSettings
  public func setAiGetCloserMessage(message: Swift.String) -> DocumentDetector.MessageSettings
  public func setAiCentralizeMessage(message: Swift.String) -> DocumentDetector.MessageSettings
  public func setAiMoveAwayMessage(message: Swift.String) -> DocumentDetector.MessageSettings
  public func setAiAlignDocumentMessage(message: Swift.String) -> DocumentDetector.MessageSettings
  public func setAiTurnDocumentMessage(message: Swift.String) -> DocumentDetector.MessageSettings
  public func setAiCapturedMessage(message: Swift.String) -> DocumentDetector.MessageSettings
  open func getPassportCountryNotValid() -> Swift.String!
  open func getpassportCountryLoading() -> Swift.String!
  open func getWaitMessage() -> Swift.String!
  open func getholdDocumentMessage() -> Swift.String
  open func getFitTheDocumentMessage() -> Swift.String!
  open func getVerifyingQualityMessage() -> Swift.String!
  open func getLowQualityDocumentMessage() -> Swift.String!
  open func getUploadingImageMessage() -> Swift.String!
  open func getSensorLuminosityMessage() -> Swift.String!
  open func getSensorOrientationMessage() -> Swift.String!
  open func getManualCaptureMessage() -> Swift.String!
  open func getSensorStabilityMessage() -> Swift.String!
  open func getPopUpDocumentSubtitleMessage() -> Swift.String
  open func getAiScanDocumentMessage() -> Swift.String!
  open func getAiGetCloserMessage() -> Swift.String
  open func getAiCentralizeMessage() -> Swift.String!
  open func getAiMoveAwayMessage() -> Swift.String
  open func getAiAlignDocumentMessage() -> Swift.String!
  open func getAiTurnDocumentMessage() -> Swift.String
  open func getAiCapturedMessage() -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class StorageReason : DocumentDetector.DocumentDetectorFailure {
  @objc deinit
}
public typealias ValidateDocumentQualityResponse = (DocumentDetector.DocumentQualityResponse?, Swift.Result<Swift.Bool, any Swift.Error>) -> Swift.Void
public class UploadValidationServer {
  public init()
  @objc deinit
}
extension DocumentDetector.UploadValidationServer {
  public func requestAccessToPhotos(completion: @escaping (Swift.Result<Swift.Bool, any Swift.Error>) -> Swift.Void)
  public func authorizationStatus() -> Photos.PHAuthorizationStatus
  public func verifyQualityOfImage(_ imageResponse: DocumentDetector.ImageUploadResponseBody, documentDetector: DocumentDetector.DocumentDetectorSdk, type: Swift.String, completion: @escaping DocumentDetector.ValidateDocumentQualityResponse)
  public func compressImage(_ image: UIKit.UIImage, documentDetector: DocumentDetector.DocumentDetectorSdk) -> Foundation.Data?
}
public struct DocumentQualityResponse : Swift.Decodable {
  public var isQualityOk: Swift.Bool?
  public var isDocTypeOk: Swift.Bool?
  public var isDocSideOk: Swift.Bool?
  public var documentType: Swift.String?
  public var imageUrl: Swift.String?
  public var quality: Swift.Double?
  public var analisysId: Swift.String?
  public var imageScore: Swift.Double?
  public var regulaId: Swift.String?
  public var morePagesAvailable: Swift.Int?
  public init(dict: [Swift.String : Any])
  public func isWrongDocument() -> Swift.Bool
  public init(from decoder: any Swift.Decoder) throws
}
public class UploadValidationMessage {
  public init(image: UIKit.UIImage? = nil, title: Swift.String, message: Swift.String = "", allowanceButtonTitle: Swift.String)
  @objc deinit
}
extension DocumentDetector.UploadValidationMessage {
  public static let allowPermissionMessage: DocumentDetector.UploadValidationMessage
  public static let deniedPermissionMessage: DocumentDetector.UploadValidationMessage
  public static let sendingPhotoMessage: DocumentDetector.UploadValidationMessage
  public static let completeSendingMessage: DocumentDetector.UploadValidationMessage
  public static let invalidFormatErrorMessage: DocumentDetector.UploadValidationMessage
  public static let invalidSizeErrorMessage: DocumentDetector.UploadValidationMessage
  public static let invalidDocumentErrorMessage: DocumentDetector.UploadValidationMessage
  public static let invalidFrontDocumentErrorWhenRequestedBackMessage: DocumentDetector.UploadValidationMessage
  public static let invalidFrontDocumentErrorWhenRequestedFullMessage: DocumentDetector.UploadValidationMessage
  public static let invalidBackDocumentErrorWhenRequestedFrontMessage: DocumentDetector.UploadValidationMessage
  public static let invalidBackDocumentErrorWhenRequestedFullMessage: DocumentDetector.UploadValidationMessage
  public static let invalidFullDocumentErrorWhenRequestedFrontMessage: DocumentDetector.UploadValidationMessage
  public static let invalidFullDocumentErrorWhenRequestedBackMessage: DocumentDetector.UploadValidationMessage
  public static let invalidQualityErrorMessage: DocumentDetector.UploadValidationMessage
}
extension DocumentDetector.UploadValidationMessage : Swift.Equatable {
  public static func == (lhs: DocumentDetector.UploadValidationMessage, rhs: DocumentDetector.UploadValidationMessage) -> Swift.Bool
}
@objc public enum Mask : Swift.Int {
  case normal
  case success
  case error
  case manual
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol DocumentDetectorControllerDelegate : ObjectiveC.NSObjectProtocol {
  @objc func documentDetectionController(_ scanner: DocumentDetector.DocumentDetectorController, didFinishWithResults results: DocumentDetector.DocumentDetectorResult)
  @objc func documentDetectionControllerDidCancel(_ scanner: DocumentDetector.DocumentDetectorController)
  @objc func documentDetectionController(_ scanner: DocumentDetector.DocumentDetectorController, didFailWithError error: DocumentDetector.DocumentDetectorFailure)
}
@objc(DocumentDetectorController) @_Concurrency.MainActor(unsafe) open class DocumentDetectorController : UIKit.UINavigationController {
  @objc @_Concurrency.MainActor(unsafe) weak public var documentDetectorDelegate: (any DocumentDetector.DocumentDetectorControllerDelegate)?
  @objc @_Concurrency.MainActor(unsafe) required public init(documentDetector: DocumentDetector.DocumentDetectorSdk)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class DocumentDetectorSdk : ObjectiveC.NSObject, Swift.Encodable {
  public static let SDK_NAME: Swift.String
  public var mobileToken: Swift.String!
  public var personId: Swift.String?
  public var useAnalytics: Swift.Bool!
  public var requestTimeout: Foundation.TimeInterval!
  public var showPopup: Swift.Bool!
  public var documentDetectorFlow: [DocumentDetector.DocumentDetectorStep]!
  public var documentDetectorLayout: DocumentDetector.DocumentDetectorLayout?
  public var shouldUpload: Swift.Bool!
  public var orientationThreshold: Swift.Double!
  public var stabilityThreshold: Swift.Double!
  public var luminosityThreshold: Swift.Float!
  public var proxySettings: DocumentDetector.ProxySettings?
  public var previewShow: Swift.Bool!
  public var previewTitle: Swift.String!
  public var previewSubtitle: Swift.String!
  public var previewConfirmLabel: Swift.String!
  public var previewRetryLabel: Swift.String!
  public var messageSettings: DocumentDetector.MessageSettings!
  public var getUrlExpireTime: Swift.String!
  public var enableManualCapture: Swift.Bool!
  public var manualCaptureTime: Foundation.TimeInterval!
  public var enableMultiLanguage: Swift.Bool!
  public var overlay: DocumentDetector.DocumentOverlayView!
  public var type: DocumentDetector.MaskType!
  public var resolution: DocumentDetector.Resolution!
  public var compressionQuality: CoreFoundation.CGFloat!
  public var currentStepDoneDelay: Foundation.TimeInterval!
  public var uploadSettings: DocumentDetector.UploadSettings!
  public var stage: DocumentDetector.CAFStage!
  public var allowedPassportCountryList: [DocumentDetector.CountryCodes]?
  public func encode(to encoder: any Swift.Encoder) throws
  @objc open class Builder : ObjectiveC.NSObject {
    public init(mobileToken: Swift.String)
    open func setAllowedPassportList(passportList: [DocumentDetector.CountryCodes]) -> DocumentDetector.DocumentDetectorSdk.Builder
    open func setPersonId(personId: Swift.String?) -> DocumentDetector.DocumentDetectorSdk.Builder
    open func setAnalyticsSettings(useAnalytics: Swift.Bool!) -> DocumentDetector.DocumentDetectorSdk.Builder
    open func setNetworkSettings(requestTimeout: Foundation.TimeInterval) -> DocumentDetector.DocumentDetectorSdk.Builder
    open func setPopupSettings(show: Swift.Bool) -> DocumentDetector.DocumentDetectorSdk.Builder
    open func setDocumentCaptureFlow(flow: [DocumentDetector.DocumentDetectorStep]) -> DocumentDetector.DocumentDetectorSdk.Builder
    open func setLayout(layout: DocumentDetector.DocumentDetectorLayout) -> DocumentDetector.DocumentDetectorSdk.Builder
    open func setLuminositySensorSettings(luminosityThreshold: Swift.Float?) -> DocumentDetector.DocumentDetectorSdk.Builder
    open func setOrientationSensorSettings(orientationThreshold: Swift.Double?) -> DocumentDetector.DocumentDetectorSdk.Builder
    open func setStabilitySensorSettings(stabilityThreshold: Swift.Double?) -> DocumentDetector.DocumentDetectorSdk.Builder
    open func setProxySettings(proxySettings: DocumentDetector.ProxySettings?) -> DocumentDetector.DocumentDetectorSdk.Builder
    open func showPreview(_ show: Swift.Bool, title: Swift.String? = nil, subtitle: Swift.String? = nil, confirmLabel: Swift.String? = nil, retryLabel: Swift.String? = nil) -> DocumentDetector.DocumentDetectorSdk.Builder
    open func setMessageSettings(waitMessage: Swift.String? = nil, fitTheDocumentMessage: Swift.String? = nil, verifyingQualityMessage: Swift.String? = nil, lowQualityDocumentMessage: Swift.String? = nil, uploadingImageMessage: Swift.String? = nil, popupDocumentSubtitleMessage: Swift.String? = nil, unsupportedDocumentMessage: Swift.String? = nil, wrongDocumentMessage: Swift.String? = nil, sensorLuminosityMessage: Swift.String? = nil, sensorOrientationMessage: Swift.String? = nil, sensorStabilityMessage: Swift.String? = nil, predictorScanDocumentMessage: Swift.String? = nil, predictorGetCloserMessage: Swift.String? = nil, predictorCentralizeMessage: Swift.String? = nil, predictorMoveAwayMessage: Swift.String? = nil, predictorAlignDocumentMessage: Swift.String? = nil, predictorTurnDocumentMessage: Swift.String? = nil, predictorCapturedMessage: Swift.String? = nil) -> DocumentDetector.DocumentDetectorSdk.Builder
    open func setGetImageUrlExpireTime(_ expireTime: Swift.String) -> DocumentDetector.DocumentDetectorSdk.Builder
    open func setManualCaptureSettings(enable: Swift.Bool, time: Foundation.TimeInterval) -> DocumentDetector.DocumentDetectorSdk.Builder
    open func enableMultiLanguage(_ enable: Swift.Bool) -> DocumentDetector.DocumentDetectorSdk.Builder
    open func setOverlay(overlay: DocumentDetector.DocumentOverlayView) -> DocumentDetector.DocumentDetectorSdk.Builder
    open func setResolutionSettings(resolution: DocumentDetector.Resolution) -> DocumentDetector.DocumentDetectorSdk.Builder
    open func setCompressSettings(compressionQuality: CoreFoundation.CGFloat) -> DocumentDetector.DocumentDetectorSdk.Builder
    open func setCurrentStepDoneDelay(currentStepDoneDelay: Foundation.TimeInterval) -> DocumentDetector.DocumentDetectorSdk.Builder
    open func setUploadSettings(uploadSettings: DocumentDetector.UploadSettings) -> DocumentDetector.DocumentDetectorSdk.Builder
    open func setStage(stage: DocumentDetector.CAFStage) -> DocumentDetector.DocumentDetectorSdk.Builder
    open func build() -> DocumentDetector.DocumentDetectorSdk
    @objc deinit
  }
  @objc deinit
}
@objc public class TokenVerificationResponse : ObjectiveC.NSObject {
  public var message: Swift.String!
  public var status: Swift.String!
  public init(dict: [Swift.String : Any])
  public func isValidToken() -> Swift.Bool
  @objc deinit
}
@objc public class ServerFailureResponse : ObjectiveC.NSObject {
  public var message: Swift.String?
  public init(response: [Swift.String : Any])
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class PermissionReason : DocumentDetector.DocumentDetectorFailure {
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class InvalidTokenReason : DocumentDetector.DocumentDetectorFailure {
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class Capture : ObjectiveC.NSObject, Swift.Encodable {
  public var image: UIKit.UIImage
  public var label: Swift.String?
  public var imageUrl: Swift.String?
  public var quality: Swift.Double!
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UploadHelper {
  @objc deinit
}
public enum UploadErrorType {
  case getUrls, upload
  public static func == (a: DocumentDetector.UploadErrorType, b: DocumentDetector.UploadErrorType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MobileApi : DocumentDetector.Api {
  public static func DOCUMENT_OCR(with documentDetector: DocumentDetector.DocumentDetectorSdk) -> DocumentDetector.MobileApi
  public static func IMAGE_UPLOAD(with documentDetector: DocumentDetector.DocumentDetectorSdk) -> DocumentDetector.MobileApi
  public static func DOCUMENT_QUALITY(with documentDetector: DocumentDetector.DocumentDetectorSdk) -> DocumentDetector.MobileApi
  public static func TOKEN_VERIFICATION(with documentDetector: DocumentDetector.DocumentDetectorSdk) -> DocumentDetector.MobileApi
  public static func ATTESTATION(with documentDetector: DocumentDetector.DocumentDetectorSdk) -> DocumentDetector.MobileApi
  @objc deinit
}
@_inheritsConvenienceInitializers @objc open class DocumentDetectorLayout : ObjectiveC.NSObject {
  public var closeButtonImage: UIKit.UIImage?
  public var closeButtonSize: CoreFoundation.CGFloat?
  public var closeButtonColor: UIKit.UIColor?
  public var closeButtonContentMode: UIKit.UIView.ContentMode?
  public var primaryColor: UIKit.UIColor
  public var feedbackColors: DocumentDetector.DocumentFeedbackColors
  public var font: Swift.String?
  @objc override dynamic public init()
  open func setFont(name: Swift.String)
  open func setCloseButtonSize(size: CoreFoundation.CGFloat)
  open func setCloseButtonColor(color: UIKit.UIColor)
  open func setCloseButtonImageImage(image: UIKit.UIImage)
  open func setCloseButtonContentMode(mode: UIKit.UIView.ContentMode)
  open func setPrimaryColor(color: UIKit.UIColor)
  open func setFeedbackColors(colors: DocumentDetector.DocumentFeedbackColors)
  @objc deinit
}
@objc public class ImageUploadResponseBody : ObjectiveC.NSObject {
  public var uploadUrl: Swift.String?
  public var imageUploadRetrieveData: DocumentDetector.ImageUploadResponseBody.ImageUploadRetrieveData?
  public init(dict: [Swift.String : Any]?)
  public struct ImageUploadRetrieveData : Swift.Encodable {
    public func encode(to encoder: any Swift.Encoder) throws
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class InvalidConfigurationReason : DocumentDetector.DocumentDetectorFailure {
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class ServerReason : DocumentDetector.DocumentDetectorFailure {
  public var code: Swift.Int!
  @objc deinit
}
public protocol DocumentDetectorCustomViewControllerDelegate : AnyObject {
  func show(loading show: Swift.Bool)
  func show(message text: Swift.String)
  func show(stepName text: Swift.String)
  func show(mask type: DocumentDetector.Mask)
  func show(manualCaptureButton hidden: Swift.Bool, reset: Swift.Bool)
  func loading(status: Swift.Bool)
  func readyToCapture(status: Swift.Bool)
  func stepDoneSuccessfully(status: Swift.Bool)
  func validationFailure(status: Swift.Bool, id: DocumentDetector.ValidationFailure?)
  func captureMode(status: DocumentDetector.CaptureMode)
  func mask(status: DocumentDetector.Mask, visibility: Swift.Bool)
  func popup(visibility: Swift.Bool)
  func manualCaptureButton(visibility: Swift.Bool)
  func preview(visibility: Swift.Bool)
  func status(message: Swift.String, visibility: Swift.Bool)
  func currentStep(name: Swift.String)
  func documentDetectionController(didFinishWithResults results: DocumentDetector.DocumentDetectorResult)
  func documentDetectionControllerDidCancel()
  func documentDetectionController(didFailWithError error: DocumentDetector.DocumentDetectorFailure)
}
@objc @_inheritsConvenienceInitializers public class DocumentDetectorCustomViewController : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
extension Swift.String {
  public func localized() -> Swift.String
}
@objc open class ProxySettings : ObjectiveC.NSObject {
  public var hostname: Swift.String!
  public var port: Swift.Int!
  public var user: Swift.String?
  public var password: Swift.String?
  public init(hostname: Swift.String, port: Swift.Int)
  open func setAutentication(user: Swift.String, password: Swift.String) -> DocumentDetector.ProxySettings
  @objc deinit
}
extension DocumentDetector.FileFormat : Swift.Equatable {}
extension DocumentDetector.FileFormat : Swift.Hashable {}
extension DocumentDetector.FileFormat : Swift.RawRepresentable {}
extension DocumentDetector.CaptureMode : Swift.Equatable {}
extension DocumentDetector.CaptureMode : Swift.Hashable {}
extension DocumentDetector.CaptureMode : Swift.RawRepresentable {}
extension DocumentDetector.CAFStage : Swift.Equatable {}
extension DocumentDetector.CAFStage : Swift.Hashable {}
extension DocumentDetector.CAFStage : Swift.RawRepresentable {}
extension DocumentDetector.Resolution : Swift.Equatable {}
extension DocumentDetector.Resolution : Swift.Hashable {}
extension DocumentDetector.Resolution : Swift.RawRepresentable {}
extension DocumentDetector.ValidationFailure : Swift.Equatable {}
extension DocumentDetector.ValidationFailure : Swift.Hashable {}
extension DocumentDetector.ValidationFailure : Swift.RawRepresentable {}
extension DocumentDetector.CountryCodes : Swift.Equatable {}
extension DocumentDetector.CountryCodes : Swift.Hashable {}
extension DocumentDetector.CountryCodes : Swift.RawRepresentable {}
extension DocumentDetector.MaskType : Swift.Equatable {}
extension DocumentDetector.MaskType : Swift.Hashable {}
extension DocumentDetector.MaskType : Swift.RawRepresentable {}
extension DocumentDetector.Mask : Swift.Equatable {}
extension DocumentDetector.Mask : Swift.Hashable {}
extension DocumentDetector.Mask : Swift.RawRepresentable {}
extension DocumentDetector.UploadErrorType : Swift.Equatable {}
extension DocumentDetector.UploadErrorType : Swift.Hashable {}
