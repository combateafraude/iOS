// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name DocumentDetector
import AVFoundation
import AVKit
import Accelerate
import AdSupport
import CommonCrypto/*.CC_LONG*/
import CommonCrypto/*.CC_MD5*/
import CommonCrypto/*.CC_MD5_DIGEST_LENGTH*/
import CoreImage
import CoreMotion
import Foundation
import Sentry
import Swift
import TensorFlowLite
import UIKit
import VideoToolbox
import Vision
import _Concurrency
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class DocumentDetectorViewController : UIKit.UIViewController, AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate, AVFoundation.AVCapturePhotoCaptureDelegate {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func clickButtonManualCapture()
  @objc @_Concurrency.MainActor(unsafe) public func cancelButtonClick()
  @_Concurrency.MainActor(unsafe) @objc public func captureOutput(_ output: AVFoundation.AVCaptureOutput, didOutput sampleBuffer: CoreMedia.CMSampleBuffer, from connection: AVFoundation.AVCaptureConnection)
  @_Concurrency.MainActor(unsafe) @objc public func photoOutput(_ output: AVFoundation.AVCapturePhotoOutput, willCapturePhotoFor resolvedSettings: AVFoundation.AVCaptureResolvedPhotoSettings)
  @_Concurrency.MainActor(unsafe) @objc public func photoOutput(_ output: AVFoundation.AVCapturePhotoOutput, didFinishProcessingPhoto photo: AVFoundation.AVCapturePhoto, error: Swift.Error?)
  @objc deinit
}
extension UIKit.UIImage {
  convenience public init?(pixelBuffer: CoreVideo.CVPixelBuffer)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class DocumentDetectorFailure : ObjectiveC.NSObject, Swift.Encodable {
  public var message: Swift.String!
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
@objc @_hasMissingDesignatedInitializers public class InvalidConfigurationReason : DocumentDetector.DocumentDetectorFailure {
  @objc deinit
}
@objc public protocol DocumentDetectorControllerDelegate : ObjectiveC.NSObjectProtocol {
  @objc func documentDetectionController(_ scanner: DocumentDetector.DocumentDetectorController, didFinishWithResults results: DocumentDetector.DocumentDetectorResult)
  @objc func documentDetectionControllerDidCancel(_ scanner: DocumentDetector.DocumentDetectorController)
  @objc func documentDetectionController(_ scanner: DocumentDetector.DocumentDetectorController, didFailWithError error: DocumentDetector.DocumentDetectorFailure)
}
@objc(DocumentDetectorController) @_Concurrency.MainActor(unsafe) open class DocumentDetectorController : UIKit.UINavigationController {
  @objc @_Concurrency.MainActor(unsafe) weak public var documentDetectorDelegate: DocumentDetector.DocumentDetectorControllerDelegate?
  @objc @_Concurrency.MainActor(unsafe) required public init(documentDetector: DocumentDetector.DocumentDetectorSdk)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class ServerReason : DocumentDetector.DocumentDetectorFailure {
  public var code: Swift.Int!
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class MessageSettings : ObjectiveC.NSObject {
  @objc override dynamic public init()
  public func setWaitMessage(message: Swift.String) -> DocumentDetector.MessageSettings
  public func setFitTheDocumentMessage(message: Swift.String) -> DocumentDetector.MessageSettings
  public func setVerifyingQualityMessage(message: Swift.String) -> DocumentDetector.MessageSettings
  public func setLowQualityDocumentMessage(message: Swift.String) -> DocumentDetector.MessageSettings
  public func setUploadingImageMessage(message: Swift.String) -> DocumentDetector.MessageSettings
  public func setSensorLuminosityMessage(message: Swift.String) -> DocumentDetector.MessageSettings
  public func setSensorOrientationMessage(message: Swift.String) -> DocumentDetector.MessageSettings
  public func setSensorStabilityMessage(message: Swift.String) -> DocumentDetector.MessageSettings
  public func getWaitMessage() -> Swift.String!
  public func getFitTheDocumentMessage() -> Swift.String!
  public func getVerifyingQualityMessage() -> Swift.String!
  public func getLowQualityDocumentMessage() -> Swift.String!
  public func getUploadingImageMessage() -> Swift.String!
  public func getSensorLuminosityMessage() -> Swift.String!
  public func getSensorOrientationMessage() -> Swift.String!
  public func getSensorStabilityMessage() -> Swift.String!
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class Api : ObjectiveC.NSObject {
  public var baseUrl: Swift.String!
  public var relativeUrl: Swift.String!
  public var method: Swift.String!
  public var headers: [Swift.String]!
  public func getUrl(pathParam: Swift.String = "") -> Swift.String!
  public func getUrlWithQueryParam(name: Swift.String = "", value: Swift.String = "") -> Swift.String!
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CafApi : DocumentDetector.Api {
  public static let IMAGE_UPLOAD: DocumentDetector.CafApi
  public static let TRANSACTIONS: DocumentDetector.CafApi
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class DocumentDetectorSdk : ObjectiveC.NSObject, Swift.Encodable {
  public static let SDK_NAME: Swift.String
  public var mobileToken: Swift.String!
  public var personId: Swift.String?
  public var useAnalytics: Swift.Bool!
  public var requestTimeout: Foundation.TimeInterval!
  public var colorTheme: UIKit.UIColor!
  public var hasSound: Swift.Bool!
  public var showPopup: Swift.Bool!
  public var showStepLabel: Swift.Bool!
  public var showStatusLabel: Swift.Bool!
  public var documentDetectorFlow: [DocumentDetector.DocumentDetectorStep]!
  public var documentDetectorLayout: DocumentDetector.DocumentDetectorLayout?
  public var shouldUpload: Swift.Bool!
  public var verifyQuality: Swift.Bool!
  public var qualityThreshold: Swift.Double!
  public var detectionThreshold: Swift.Float!
  public var orientationThreshold: Swift.Double!
  public var stabilityThreshold: Swift.Double!
  public var luminosityThreshold: Swift.Float!
  public var proxySettings: DocumentDetector.ProxySettings?
  public var previewShow: Swift.Bool!
  public var previewTitle: Swift.String!
  public var previewSubtitle: Swift.String!
  public var previewConfirmLabel: Swift.String!
  public var previewRetryLabel: Swift.String!
  public var messageSettings: DocumentDetector.MessageSettings!
  public var getUrlExpireTime: DocumentDetector.Time!
  public var enableManualCapture: Swift.Bool!
  public var manualCaptureTime: Foundation.TimeInterval!
  public var enableMultiLanguage: Swift.Bool!
  public var overlay: DocumentDetector.DocumentOverlayView!
  public var resolution: DocumentDetector.Resolution!
  public var compressionQuality: CoreGraphics.CGFloat!
  public func encode(to encoder: Swift.Encoder) throws
  @objc public class Builder : ObjectiveC.NSObject {
    public init(mobileToken: Swift.String)
    public func setPersonId(personId: Swift.String?) -> DocumentDetector.DocumentDetectorSdk.Builder
    public func setAnalyticsSettings(useAnalytics: Swift.Bool!) -> DocumentDetector.DocumentDetectorSdk.Builder
    public func setNetworkSettings(requestTimeout: Foundation.TimeInterval) -> DocumentDetector.DocumentDetectorSdk.Builder
    public func setColorTheme(color: UIKit.UIColor) -> DocumentDetector.DocumentDetectorSdk.Builder
    public func enableSound(enableSound: Swift.Bool) -> DocumentDetector.DocumentDetectorSdk.Builder
    public func setPopupSettings(show: Swift.Bool) -> DocumentDetector.DocumentDetectorSdk.Builder
    public func showStepLabel(show: Swift.Bool) -> DocumentDetector.DocumentDetectorSdk.Builder
    public func showStatusLabel(show: Swift.Bool) -> DocumentDetector.DocumentDetectorSdk.Builder
    public func setDocumentDetectorFlow(flow: [DocumentDetector.DocumentDetectorStep]) -> DocumentDetector.DocumentDetectorSdk.Builder
    public func setLayout(layout: DocumentDetector.DocumentDetectorLayout) -> DocumentDetector.DocumentDetectorSdk.Builder
    public func setLuminositySensorSettings(luminosityThreshold: Swift.Float?) -> DocumentDetector.DocumentDetectorSdk.Builder
    public func setOrientationSensorSettings(orientationThreshold: Swift.Double?) -> DocumentDetector.DocumentDetectorSdk.Builder
    public func setStabilitySensorSettings(stabilityThreshold: Swift.Double?) -> DocumentDetector.DocumentDetectorSdk.Builder
    public func setQualitySettings(verifyQuality: Swift.Bool, qualityThreshold: Swift.Double?) -> DocumentDetector.DocumentDetectorSdk.Builder
    public func setDetectionSettings(detectionThreshold: Swift.Float) -> DocumentDetector.DocumentDetectorSdk.Builder
    public func setProxySettings(proxySettings: DocumentDetector.ProxySettings?) -> DocumentDetector.DocumentDetectorSdk.Builder
    public func showPreview(_ show: Swift.Bool, title: Swift.String? = nil, subtitle: Swift.String? = nil, confirmLabel: Swift.String? = nil, retryLabel: Swift.String? = nil) -> DocumentDetector.DocumentDetectorSdk.Builder
    public func setMessageSettings(waitMessage: Swift.String? = nil, fitTheDocumentMessage: Swift.String? = nil, verifyingQualityMessage: Swift.String? = nil, lowQualityDocumentMessage: Swift.String? = nil, uploadingImageMessage: Swift.String? = nil, unsupportedDocumentMessage: Swift.String? = nil, wrongDocumentMessage_RG_FRONT: Swift.String? = nil, wrongDocumentMessage_RG_BACK: Swift.String? = nil, wrongDocumentMessage_RG_FULL: Swift.String? = nil, wrongDocumentMessage_CNH_FRONT: Swift.String? = nil, wrongDocumentMessage_CNH_BACK: Swift.String? = nil, wrongDocumentMessage_CNH_FULL: Swift.String? = nil, wrongDocumentMessage_CRLV: Swift.String? = nil, wrongDocumentMessage_RNE_FRONT: Swift.String? = nil, wrongDocumentMessage_RNE_BACK: Swift.String? = nil, sensorLuminosityMessage: Swift.String? = nil, sensorOrientationMessage: Swift.String? = nil, sensorStabilityMessage: Swift.String? = nil) -> DocumentDetector.DocumentDetectorSdk.Builder
    public func setGetImageUrlExpireTime(_ expireTime: DocumentDetector.Time) -> DocumentDetector.DocumentDetectorSdk.Builder
    public func setManualCaptureSettings(enable: Swift.Bool, time: Foundation.TimeInterval) -> DocumentDetector.DocumentDetectorSdk.Builder
    public func enableMultiLanguage(enable: Swift.Bool) -> DocumentDetector.DocumentDetectorSdk.Builder
    public func setOverlay(overlay: DocumentDetector.DocumentOverlayView) -> DocumentDetector.DocumentDetectorSdk.Builder
    public func setResolutionSettings(resolution: DocumentDetector.Resolution) -> DocumentDetector.DocumentDetectorSdk.Builder
    public func setCompressSettings(compressionQuality: CoreGraphics.CGFloat) -> DocumentDetector.DocumentDetectorSdk.Builder
    public func build() -> DocumentDetector.DocumentDetectorSdk
    @objc deinit
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MobileApi : DocumentDetector.Api {
  public static let TOKEN_VERIFICATION: DocumentDetector.MobileApi
  public static let DOCUMENT_QUALITY: DocumentDetector.MobileApi
  public static let IMAGE_UPLOAD: DocumentDetector.MobileApi
  @objc deinit
}
@objc public class TokenVerificationResponse : ObjectiveC.NSObject {
  public var message: Swift.String!
  public var status: Swift.String!
  public init(dict: [Swift.String : Any])
  public func isValidToken() -> Swift.Bool
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class DocumentDetectorLayout : ObjectiveC.NSObject {
  public var closeImage: UIKit.UIImage?
  public var font: Swift.String?
  @objc override dynamic public init()
  public func setFont(name: Swift.String)
  public func changeMaskImages(greenMask: UIKit.UIImage?, whiteMask: UIKit.UIImage?, redMask: UIKit.UIImage?)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class PermissionReason : DocumentDetector.DocumentDetectorFailure {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class DocumentDetectorResult : ObjectiveC.NSObject, Swift.Encodable {
  public var type: Swift.String!
  public var captures: [DocumentDetector.Capture]!
  public var trackingId: Swift.String?
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
public enum MaskType {
  case normal
  case success
  case error
  public static func == (a: DocumentDetector.MaskType, b: DocumentDetector.MaskType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers public class Label : ObjectiveC.NSObject, Swift.Encodable {
  public static let BLANK: DocumentDetector.Label
  public static let CNH_BACK: DocumentDetector.Label
  public static let CNH_FRONT: DocumentDetector.Label
  public static let CNH_FULL: DocumentDetector.Label
  public static let CRLV: DocumentDetector.Label
  public static let GENERIC: DocumentDetector.Label
  public static let RG_BACK: DocumentDetector.Label
  public static let RG_FRONT: DocumentDetector.Label
  public static let RG_FULL: DocumentDetector.Label
  public static let RG_NEW_BACK: DocumentDetector.Label
  public static let RG_NEW_FRONT: DocumentDetector.Label
  public static let RG_NEW_FULL: DocumentDetector.Label
  public static let RNE_BACK: DocumentDetector.Label
  public static let RNE_FRONT: DocumentDetector.Label
  public static let RNM_BACK: DocumentDetector.Label
  public static let RNM_FRONT: DocumentDetector.Label
  public var scanLabel: Swift.String!
  public var documentType: Swift.String?
  public static func getScannedLabel(scanLabel: Swift.String) -> DocumentDetector.Label?
  public func encode(to encoder: Swift.Encoder) throws
  public static func allLabels() -> [DocumentDetector.Label]
  public static func allScanLabels() -> [Swift.String]
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class Capture : ObjectiveC.NSObject, Swift.Encodable {
  public var image: UIKit.UIImage
  public var scannedLabel: Swift.String?
  public var imageUrl: Swift.String?
  public var quality: Swift.Double!
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) open class DocumentOverlayView : UIKit.UIView, DocumentDetector.DocumentDetectorCustomViewControllerDelegate {
  @_Concurrency.MainActor(unsafe) open func show(loading show: Swift.Bool)
  @_Concurrency.MainActor(unsafe) open func show(message text: Swift.String)
  @_Concurrency.MainActor(unsafe) open func show(stepName text: Swift.String)
  @_Concurrency.MainActor(unsafe) open func show(mask type: DocumentDetector.MaskType)
  @_Concurrency.MainActor(unsafe) open func show(manualCaptureButton hidden: Swift.Bool)
  @_Concurrency.MainActor(unsafe) open func updateOverlay(newSize: CoreGraphics.CGSize)
  @_Concurrency.MainActor(unsafe) open func setCurrentActionChecked(checked: Swift.Bool)
  @_Concurrency.MainActor(unsafe) open func setCurrentAction(text: Swift.String, checked: Swift.Bool)
  @_Concurrency.MainActor(unsafe) open func setLastAction(text: Swift.String)
  @_Concurrency.MainActor(unsafe) open func documentDetectionController(didFinishWithResults results: DocumentDetector.DocumentDetectorResult)
  @_Concurrency.MainActor(unsafe) open func documentDetectionControllerDidCancel()
  @_Concurrency.MainActor(unsafe) open func documentDetectionController(didFailWithError error: DocumentDetector.DocumentDetectorFailure)
  @_Concurrency.MainActor(unsafe) weak public var viewController: DocumentDetector.DocumentDetectorViewController?
  @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UploadHelper {
  @objc deinit
}
public enum Time {
  case DEFAULT
  case DAYS_30
  public static func == (a: DocumentDetector.Time, b: DocumentDetector.Time) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class AnalyticsApi : DocumentDetector.Api {
  public static let REQUEST_TRACKING_ID: DocumentDetector.AnalyticsApi
  public static let ADD_EVENT: DocumentDetector.AnalyticsApi
  @objc deinit
}
public enum Resolution {
  case low, medium, high, photo, inputPriority, hd1280x720, hd1920x1080, hd4K3840x2160, iFrame960x540, iFrame1280x720, vga640x480, cif352x288
  public static func == (a: DocumentDetector.Resolution, b: DocumentDetector.Resolution) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers public class StorageReason : DocumentDetector.DocumentDetectorFailure {
  @objc deinit
}
@objc public class ProxySettings : ObjectiveC.NSObject {
  public var hostname: Swift.String!
  public var port: Swift.Int!
  public var user: Swift.String?
  public var password: Swift.String?
  public init(hostname: Swift.String, port: Swift.Int)
  public func setAutentication(user: Swift.String, password: Swift.String) -> DocumentDetector.ProxySettings
  @objc deinit
}
@objc public class DocumentDetectorStep : ObjectiveC.NSObject, Swift.Encodable {
  public var document: DocumentDetector.Document!
  public var stepLabel: Swift.String!
  public var illustration: UIKit.UIImage!
  public var audio: Foundation.URL!
  public init(document: DocumentDetector.Document, stepLabel: Swift.String?, illustration: UIKit.UIImage?, audio: Foundation.URL?)
  public func encode(to encoder: Swift.Encoder) throws
  public func resetAttributesToDefault()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class NetworkReason : DocumentDetector.DocumentDetectorFailure {
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class InvalidTokenReason : DocumentDetector.DocumentDetectorFailure {
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class Document : ObjectiveC.NSObject {
  public static let RG_FRONT: DocumentDetector.Document
  public static let RG_BACK: DocumentDetector.Document
  public static let RG_FULL: DocumentDetector.Document
  public static let CNH_FRONT: DocumentDetector.Document
  public static let CNH_BACK: DocumentDetector.Document
  public static let CNH_FULL: DocumentDetector.Document
  public static let CRLV: DocumentDetector.Document
  public static let RNE_FRONT: DocumentDetector.Document
  public static let RNE_BACK: DocumentDetector.Document
  public static let OTHERS: DocumentDetector.Document
  public var labels: [DocumentDetector.Label]
  public var stepLabel: Swift.String!
  public var wrongDocumentFoundMessage: Swift.String!
  public var illustration: UIKit.UIImage!
  public var audio: Foundation.URL!
  public static func getByLabel(label: DocumentDetector.Label) -> DocumentDetector.Document?
  public static func allDocuments() -> [DocumentDetector.Document]
  public func setDefaultMessages()
  @objc deinit
}
@objc public class ServerFailureResponse : ObjectiveC.NSObject {
  public var message: Swift.String?
  public init(response: [Swift.String : Any])
  @objc deinit
}
public protocol DocumentDetectorCustomViewControllerDelegate : AnyObject {
  func show(loading show: Swift.Bool)
  func show(message text: Swift.String)
  func show(stepName text: Swift.String)
  func show(mask type: DocumentDetector.MaskType)
  func show(manualCaptureButton hidden: Swift.Bool)
  func documentDetectionController(didFinishWithResults results: DocumentDetector.DocumentDetectorResult)
  func documentDetectionControllerDidCancel()
  func documentDetectionController(didFailWithError error: DocumentDetector.DocumentDetectorFailure)
}
@objc public class DocumentDetectorCustomViewController : ObjectiveC.NSObject, AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate, AVFoundation.AVCapturePhotoCaptureDelegate {
  public init(documentDetector: DocumentDetector.DocumentDetectorSdk, viewController: UIKit.UIViewController, previewView: UIKit.UIView)
  public func viewDidLayoutSubviews()
  public func viewWillAppear()
  public func viewWillDisappear()
  public func viewDidAppear()
  public func cancelButtonClick()
  @objc public func captureOutput(_ output: AVFoundation.AVCaptureOutput, didOutput sampleBuffer: CoreMedia.CMSampleBuffer, from connection: AVFoundation.AVCaptureConnection)
  public func clickButtonManualCapture()
  @objc public func photoOutput(_ output: AVFoundation.AVCapturePhotoOutput, willCapturePhotoFor resolvedSettings: AVFoundation.AVCaptureResolvedPhotoSettings)
  @objc public func photoOutput(_ output: AVFoundation.AVCapturePhotoOutput, didFinishProcessingPhoto photo: AVFoundation.AVCapturePhoto, error: Swift.Error?)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class LibraryReason : DocumentDetector.DocumentDetectorFailure {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class DocumentValidator : ObjectiveC.NSObject {
  public var isDocumentDetected: Swift.Bool!
  public var isPhoneInHorizontal: Swift.Bool!
  public var isPhoneStable: Swift.Bool!
  public var errorStatus: Swift.String!
  public var missedAttemps: Swift.Int!
  public var lastLabelScanned: DocumentDetector.Label!
  @objc override dynamic public init()
  @objc deinit
}
extension DocumentDetector.MaskType : Swift.Equatable {}
extension DocumentDetector.MaskType : Swift.Hashable {}
extension DocumentDetector.Time : Swift.Equatable {}
extension DocumentDetector.Time : Swift.Hashable {}
extension DocumentDetector.Resolution : Swift.Equatable {}
extension DocumentDetector.Resolution : Swift.Hashable {}
