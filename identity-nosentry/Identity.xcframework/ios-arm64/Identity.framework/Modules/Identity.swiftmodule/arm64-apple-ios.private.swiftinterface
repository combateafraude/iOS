// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target arm64-apple-ios12.4 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name Identity
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AdSupport
import CommonCrypto/*.CC_LONG*/
import CommonCrypto/*.CC_MD5*/
import CommonCrypto/*.CC_MD5_DIGEST_LENGTH*/
import CoreLocation
import FaceLiveness
import FingerprintPro
import Foundation
@_exported import Identity
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class AEOTPTextField : UIKit.UITextField {
  @_Concurrency.MainActor(unsafe) public var otpDefaultCharacter: Swift.String
  @_Concurrency.MainActor(unsafe) public var otpBackgroundColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var otpFilledBackgroundColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var otpCornerRaduis: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var otpDefaultBorderColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var otpFilledBorderColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var otpDefaultBorderWidth: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var otpFilledBorderWidth: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var otpTextColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var otpFontSize: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var otpFont: UIKit.UIFont
  @_Concurrency.MainActor(unsafe) weak public var otpDelegate: (any Identity.AEOTPTextFieldDelegate)?
  @_Concurrency.MainActor(unsafe) public func configure(with slotCount: Swift.Int = 6)
  @_Concurrency.MainActor(unsafe) public func clearOTP()
  @_Concurrency.MainActor(unsafe) public func setText(_ text: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public typealias VerifyPolicyResponse = (isAuthorized: Swift.Bool, attestation: Swift.String)
public typealias VerifyPolicyResult = Identity.IdentityResult<Identity.VerifyPolicyResponse, Identity.VerifyPolicyResponse, Identity.IdentityError>
public typealias VerifyPolicyListener = (Identity.VerifyPolicyResult) -> Swift.Void
@objc @_hasMissingDesignatedInitializers open class IdentitySDK : ObjectiveC.NSObject {
  public static let SDK_NAME: Swift.String
  public var mobileToken: Swift.String
  public var stage: Identity.IdentityStage
  public var emailURL: Foundation.URL?
  public var phoneURL: Foundation.URL?
  public var livenessToken: Swift.String
  public func verifyPolicy(personID: Swift.String, policyId: Swift.String, listener: @escaping Identity.VerifyPolicyListener)
  @objc deinit
}
extension Identity.IdentitySDK {
  public class Builder {
    public init(mobileToken: Swift.String, livenessToken: Swift.String)
    public func build() -> Identity.IdentitySDK
    public func setFaceAuthenticatorSettings(livenessToken: Swift.String) -> Identity.IdentitySDK.Builder
    public func setStage(_ newStage: Identity.IdentityStage) -> Identity.IdentitySDK.Builder
    public func setEmailURL(_ url: Foundation.URL?) -> Identity.IdentitySDK.Builder
    public func setPhoneURL(_ url: Foundation.URL?) -> Identity.IdentitySDK.Builder
    @objc deinit
  }
}
@objc @_hasMissingDesignatedInitializers public class FaceAuthenticatorResult : ObjectiveC.NSObject, Swift.Encodable {
  public var isAuthorized: Swift.Bool?
  public var attestation: Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc @_hasMissingDesignatedInitializers public class FaceAuthenticatorResultError : ObjectiveC.NSObject, Swift.Encodable {
  public var error: Swift.String
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum IdentityStage {
  case DEV
  case BETA
  case PROD
  public static func == (a: Identity.IdentityStage, b: Identity.IdentityStage) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum IdentityError : Swift.Error {
  case PermissionReason(Swift.String)
  case AvailabilityReason(Swift.String)
  case NetworkReason
  case ServerReason(Swift.String, Swift.Int?)
  case SecurityReason(Swift.String)
  case StorageReason(Swift.String)
  case LibraryReason(Swift.String)
  case PolicyReason(Swift.String)
  case GetLocationReason(Swift.String)
  case TerminateByUser(Swift.String)
}
extension Identity.IdentityError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@frozen public enum IdentityResult<Success, Pending, Failure> where Failure : Swift.Error {
  case onSuccess(Success)
  case onPending(Pending)
  case onError(Failure)
  case onCanceled(Failure)
}
@_hasMissingDesignatedInitializers public class OtherInfo : Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers public class CodeAuthenticatorResult : ObjectiveC.NSObject, Swift.Encodable {
  public var isAuthorized: Swift.Bool?
  public var attestation: Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc @_hasMissingDesignatedInitializers public class CodeAuthenticatorResultWithPending : ObjectiveC.NSObject, Swift.Encodable {
  public var isAuthorized: Swift.Bool?
  public var attestation: Swift.String?
  public var requestId: Swift.String?
  public var message: Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc @_hasMissingDesignatedInitializers public class CodeAuthenticatorResultError : ObjectiveC.NSObject, Swift.Encodable {
  public var error: Swift.String
  public var message: Swift.String
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc @_hasMissingDesignatedInitializers public class CodeAuthenticatorResultDisapproved : ObjectiveC.NSObject, Swift.Encodable {
  public var isAuthorized: Swift.Bool?
  public var attestation: Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
public protocol AEOTPTextFieldDelegate : AnyObject {
  func didUserFinishEnter(the code: Swift.String)
}
@objc @_inheritsConvenienceInitializers public class FingerprintUtil : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
public enum DeviceFlag : Swift.Int, Swift.Codable {
  case notDetected
  case detected
  case notDetectable
  case detectionFailed
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class BateryInfo : Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
extension Identity.IdentityStage : Swift.Equatable {}
extension Identity.IdentityStage : Swift.Hashable {}
extension Identity.DeviceFlag : Swift.Equatable {}
extension Identity.DeviceFlag : Swift.Hashable {}
extension Identity.DeviceFlag : Swift.RawRepresentable {}
