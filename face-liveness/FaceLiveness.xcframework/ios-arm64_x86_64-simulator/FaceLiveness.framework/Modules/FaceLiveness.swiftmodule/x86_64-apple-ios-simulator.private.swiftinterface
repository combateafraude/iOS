// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name FaceLiveness
// swift-module-flags-ignorable: -enable-bare-slash-regex
import FingerprintPro
import Foundation
import Security
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import iProov
public enum CafResult<LivenessResult, SDKFailure> {
  case sucess(LivenessResult)
  case error(SDKFailure)
  case canceled
}
public struct SDKFailure {
  public let errorType: FaceLiveness.ErrorType?
  public let description: Swift.String?
}
public enum ErrorType : Swift.String {
  case unsupportedDevice
  case cameraPermission
  case networkException
  case serverException
  case tokenException
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum FailType {
  case unknown
  public static func == (a: FaceLiveness.FailType, b: FaceLiveness.FailType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct FaceLivenessResult {
  public let signedResponse: Swift.String?
}
public struct FaceLivenessErrorResult {
  public let errorType: FaceLiveness.ErrorType?
  public let description: Swift.String?
}
public struct LivenessResult {
  public let signedResponse: Swift.String?
}
@objc public enum CAFStage : Swift.Int {
  case BETA, PROD, DEV
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class FaceLivenessSDKViewModel {
  public func launchSDKHelper(completion: @escaping (FaceLiveness.CafResult<FaceLiveness.LivenessResult, FaceLiveness.SDKFailure>) -> Swift.Void)
  @objc deinit
}
public enum LivenessState : Swift.String {
  case connecting
  case connected
  case closed
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum StatusControll : Swift.Int {
  case sucess
  case cancelled
  case error
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum ResourceType : Swift.String {
  case liveness
  case authentication
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum SdkType : Swift.String {
  case Native
  case ReactNative
  case Flutter
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum Filter : Swift.Int {
  case lineDrawing, natural
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum Time : Swift.String {
  case threeHours
  case thirtyDays
  case thirtyMin
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol FaceLivenessDelegate : AnyObject {
  func didFinishLiveness(with livenessResult: FaceLiveness.LivenessResult)
  func didFinishWithCancelled()
  func didFinishWithError(with sdkFailure: FaceLiveness.SDKFailure)
  func openLoadingScreenStartSDK()
  func closeLoadingScreenStartSDK()
  func openLoadingScreenValidation()
  func closeLoadingScreenValidation()
  func onConnectionChanged(_ state: FaceLiveness.LivenessState)
}
@objc @_hasMissingDesignatedInitializers open class FaceLivenessSDK : ObjectiveC.NSObject {
  public var stage: FaceLiveness.CAFStage
  public var sdkVersion: Swift.String
  public var filter: FaceLiveness.Filter
  public var withLoading: Swift.Bool
  public var imageUrlExpirationTime: FaceLiveness.Time
  public var sdkType: FaceLiveness.SdkType {
    get
    set
  }
  public var resourceType: FaceLiveness.ResourceType {
    get
    set
  }
  weak public var delegate: (any FaceLiveness.FaceLivenessDelegate)?
  open func startSDK(viewController: UIKit.UIViewController, mobileToken: Swift.String, personId: Swift.String, debugEnabled: Swift.Bool = false)
  @_inheritsConvenienceInitializers @objc open class Build : ObjectiveC.NSObject {
    public var imageUrlExpirationTime: FaceLiveness.Time
    @objc override dynamic public init()
    open func setStage(stage: FaceLiveness.CAFStage) -> FaceLiveness.FaceLivenessSDK.Build
    open func setFilter(filter: FaceLiveness.Filter) -> FaceLiveness.FaceLivenessSDK.Build
    open func setImageUrlExpirationTime(time: FaceLiveness.Time) -> FaceLiveness.FaceLivenessSDK.Build
    open func setLoadingScreen(withLoading: Swift.Bool) -> FaceLiveness.FaceLivenessSDK.Build
    open func build() -> FaceLiveness.FaceLivenessSDK
    @objc deinit
  }
  @objc deinit
}
extension FaceLiveness.ErrorType : Swift.Equatable {}
extension FaceLiveness.ErrorType : Swift.Hashable {}
extension FaceLiveness.ErrorType : Swift.RawRepresentable {}
extension FaceLiveness.FailType : Swift.Equatable {}
extension FaceLiveness.FailType : Swift.Hashable {}
extension FaceLiveness.CAFStage : Swift.Equatable {}
extension FaceLiveness.CAFStage : Swift.Hashable {}
extension FaceLiveness.CAFStage : Swift.RawRepresentable {}
extension FaceLiveness.LivenessState : Swift.Equatable {}
extension FaceLiveness.LivenessState : Swift.Hashable {}
extension FaceLiveness.LivenessState : Swift.RawRepresentable {}
extension FaceLiveness.StatusControll : Swift.Equatable {}
extension FaceLiveness.StatusControll : Swift.Hashable {}
extension FaceLiveness.StatusControll : Swift.RawRepresentable {}
extension FaceLiveness.ResourceType : Swift.Equatable {}
extension FaceLiveness.ResourceType : Swift.Hashable {}
extension FaceLiveness.ResourceType : Swift.RawRepresentable {}
extension FaceLiveness.SdkType : Swift.Equatable {}
extension FaceLiveness.SdkType : Swift.Hashable {}
extension FaceLiveness.SdkType : Swift.RawRepresentable {}
extension FaceLiveness.Filter : Swift.Equatable {}
extension FaceLiveness.Filter : Swift.Hashable {}
extension FaceLiveness.Filter : Swift.RawRepresentable {}
extension FaceLiveness.Time : Swift.Equatable {}
extension FaceLiveness.Time : Swift.Hashable {}
extension FaceLiveness.Time : Swift.RawRepresentable {}
