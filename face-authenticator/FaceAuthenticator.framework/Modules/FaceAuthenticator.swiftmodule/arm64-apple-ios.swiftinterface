// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name FaceAuthenticator
import AVFoundation
import AVKit
import AdSupport
import Alamofire
import CommonCrypto/*.CC_LONG*/
import CommonCrypto/*.CC_MD5*/
import CommonCrypto/*.CC_MD5_DIGEST_LENGTH*/
import CoreImage
import CoreMotion
import Foundation
import Sentry
import Swift
import UIKit
import Vision
@objc @_hasMissingDesignatedInitializers public class PermissionReason : FaceAuthenticator.FaceAuthenticatorFailure {
  @objc deinit
}
@objc public class ServerFailureResponse : ObjectiveC.NSObject {
  public var message: Swift.String?
  public init(response: [Swift.String : Any])
  @objc deinit
  @objc override dynamic public init()
}
@objc @_hasMissingDesignatedInitializers public class ServerReason : FaceAuthenticator.FaceAuthenticatorFailure {
  public var code: Swift.Int!
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class InvalidConfigurationReason : FaceAuthenticator.FaceAuthenticatorFailure {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class AnalyticsApi : FaceAuthenticator.Api {
  public static var REQUEST_TRACKING_ID: FaceAuthenticator.AnalyticsApi
  public static var ADD_EVENT: FaceAuthenticator.AnalyticsApi
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UploadHelper {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CafApi : FaceAuthenticator.Api {
  public static var IMAGE_UPLOAD: FaceAuthenticator.CafApi
  @objc deinit
}
@objc public class TokenVerificationResponse : ObjectiveC.NSObject {
  public var message: Swift.String!
  public var status: Swift.String!
  public init(dict: [Swift.String : Any])
  public func isValidToken() -> Swift.Bool
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class JWTUtil : ObjectiveC.NSObject {
  public static func payloadToDict(_ payload: Swift.String) -> [Swift.String : Any]?
  @objc deinit
  @objc override dynamic public init()
}
@objc @_hasMissingDesignatedInitializers public class Api : ObjectiveC.NSObject {
  public var baseUrl: Swift.String!
  public var relativeUrl: Swift.String!
  public var method: Alamofire.HTTPMethod!
  public var headers: Alamofire.HTTPHeaders!
  public func getUrl(pathParam: Swift.String = "") -> Swift.String!
  @objc deinit
  @objc override dynamic public init()
}
@objc @_hasMissingDesignatedInitializers public class FaceAuthenticatorResult : ObjectiveC.NSObject, Swift.Encodable {
  public var authenticated: Swift.Bool!
  public var signedResponse: Swift.String!
  public var trackingId: Swift.String?
  @objc deinit
  @objc override dynamic public init()
  public func encode(to encoder: Swift.Encoder) throws
}
@objc @_hasMissingDesignatedInitializers public class FaceAuthenticator : ObjectiveC.NSObject, Swift.Encodable {
  public static var SDK_NAME: Swift.String
  public var peopleId: Swift.String!
  public var mobileToken: Swift.String!
  public var useAnalytics: Swift.Bool!
  public var requestTimeout: Foundation.TimeInterval!
  public var colorTheme: UIKit.UIColor!
  public var hasSound: Swift.Bool!
  public var showStepLabel: Swift.Bool!
  public var showStatusLabel: Swift.Bool!
  public var layout: FaceAuthenticator.FaceAuthenticatorLayout?
  public var sensorStabilityMessage: Swift.String!
  public var stabilityThreshold: Swift.Double!
  public var beforePictureInterval: Foundation.TimeInterval!
  public func encode(to encoder: Swift.Encoder) throws
  @objc public class Builder : ObjectiveC.NSObject {
    public init(mobileToken: Swift.String)
    public func setPeopleId(_ peopleId: Swift.String) -> FaceAuthenticator.FaceAuthenticator.Builder
    public func setAnalyticsSettings(useAnalytics: Swift.Bool!) -> FaceAuthenticator.FaceAuthenticator.Builder
    public func setNetworkSettings(requestTimeout: Foundation.TimeInterval) -> FaceAuthenticator.FaceAuthenticator.Builder
    public func setColorTheme(color: UIKit.UIColor) -> FaceAuthenticator.FaceAuthenticator.Builder
    public func enableSound(hasSound: Swift.Bool) -> FaceAuthenticator.FaceAuthenticator.Builder
    public func showStepLabel(show: Swift.Bool) -> FaceAuthenticator.FaceAuthenticator.Builder
    public func showStatusLabel(show: Swift.Bool) -> FaceAuthenticator.FaceAuthenticator.Builder
    public func setLayout(layout: FaceAuthenticator.FaceAuthenticatorLayout) -> FaceAuthenticator.FaceAuthenticator.Builder
    public func setStabilitySensorSettings(message: Swift.String?, stabilityThreshold: Swift.Double?) -> FaceAuthenticator.FaceAuthenticator.Builder
    public func setCaptureSettings(beforePictureInterval: Foundation.TimeInterval!) -> FaceAuthenticator.FaceAuthenticator.Builder
    public func build() -> FaceAuthenticator.FaceAuthenticator
    @objc deinit
    @objc override dynamic public init()
  }
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class FaceAuthenticatorLayout : ObjectiveC.NSObject {
  public var closeImage: UIKit.UIImage?
  @objc override dynamic public init()
  public func changeMaskImages(greenMask: UIKit.UIImage?, whiteMask: UIKit.UIImage?, redMask: UIKit.UIImage?)
  public func changeSoundImages(soundOn: UIKit.UIImage?, soundOff: UIKit.UIImage?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MobileApi : FaceAuthenticator.Api {
  public static var TOKEN_VERIFICATION: FaceAuthenticator.MobileApi
  public static var FACE_AUTHENTICATE: FaceAuthenticator.MobileApi
  @objc deinit
}
extension UIImage {
  public class func imageWithImage(sourceImage: UIKit.UIImage, scaledToWidth: CoreGraphics.CGFloat) -> UIKit.UIImage
}
@_hasMissingDesignatedInitializers public class Device : Swift.Encodable {
  public var fingerprint: Swift.String!
  public var model: Swift.String!
  public var manufacturer: Swift.String!
  public var operatingSystem: Swift.String!
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class FaceAuthenticatorFailure : ObjectiveC.NSObject, Swift.Encodable {
  public var message: Swift.String!
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
@objc @_hasMissingDesignatedInitializers public class StorageReason : FaceAuthenticator.FaceAuthenticatorFailure {
  @objc deinit
}
public protocol FaceAuthenticatorControllerDelegate : ObjectiveC.NSObjectProtocol {
  func faceAuthenticatorController(_ faceAuthenticatorController: FaceAuthenticator.FaceAuthenticatorController, didFinishWithResults results: FaceAuthenticator.FaceAuthenticatorResult)
  func faceAuthenticatorControllerDidCancel(_ faceAuthenticatorController: FaceAuthenticator.FaceAuthenticatorController)
  func faceAuthenticatorController(_ faceAuthenticatorController: FaceAuthenticator.FaceAuthenticatorController, didFailWithError error: FaceAuthenticator.FaceAuthenticatorFailure)
}
@objc final public class FaceAuthenticatorController : UIKit.UINavigationController {
  weak final public var faceAuthenticatorDelegate: FaceAuthenticator.FaceAuthenticatorControllerDelegate?
  required public init(faceAuthenticator: FaceAuthenticator.FaceAuthenticator)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override final public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @objc deinit
  @available(iOS 5.0, *)
  @objc override dynamic public init(navigationBarClass: Swift.AnyClass?, toolbarClass: Swift.AnyClass?)
  @objc override dynamic public init(rootViewController: UIKit.UIViewController)
}
public struct FaceAuthResults {
  public var faceImage: UIKit.UIImage
  public var authenticated: Swift.Bool
}
@objc @_hasMissingDesignatedInitializers public class InvalidTokenReason : FaceAuthenticator.FaceAuthenticatorFailure {
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class NetworkReason : FaceAuthenticator.FaceAuthenticatorFailure {
  public var error: Swift.Error?
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
